import XEUtils from 'xe-utils';
import ExcelJS from 'exceljs';
var vxetable;
var defaultHeaderBackgroundColor = 'f8f8f9';
var defaultCellFontColor = '606266';
var defaultCellBorderStyle = 'thin';
var defaultCellBorderColor = 'e8eaec';

function getCellLabel(column, cellValue) {
  if (cellValue) {
    switch (column.cellType) {
      case 'string':
        return XEUtils.toValueString(cellValue);

      case 'number':
        if (!isNaN(cellValue)) {
          return Number(cellValue);
        }

        break;

      default:
        if (cellValue.length < 12 && !isNaN(cellValue)) {
          return Number(cellValue);
        }

        break;
    }
  }

  return cellValue;
}

function getFooterData(opts, footerData) {
  var footerFilterMethod = opts.footerFilterMethod;
  return footerFilterMethod ? footerData.filter(function (items, index) {
    return footerFilterMethod({
      items: items,
      $rowIndex: index
    });
  }) : footerData;
}

function getFooterCellValue($table, opts, rows, column) {
  var cellValue = getCellLabel(column, rows[$table.getVMColumnIndex(column)]);
  return cellValue;
}

function getValidColumn(column) {
  var childNodes = column.childNodes;
  var isColGroup = childNodes && childNodes.length;

  if (isColGroup) {
    return getValidColumn(childNodes[0]);
  }

  return column;
}

function setExcelRowHeight(excelRow, height) {
  if (height) {
    excelRow.height = XEUtils.floor(height * 0.75, 12);
  }
}

function setExcelCellStyle(excelCell, align) {
  excelCell.protection = {
    locked: false
  };
  excelCell.alignment = {
    vertical: 'middle',
    horizontal: align || 'left'
  };
}

function getDefaultBorderStyle() {
  return {
    top: {
      style: defaultCellBorderStyle,
      color: {
        argb: defaultCellBorderColor
      }
    },
    left: {
      style: defaultCellBorderStyle,
      color: {
        argb: defaultCellBorderColor
      }
    },
    bottom: {
      style: defaultCellBorderStyle,
      color: {
        argb: defaultCellBorderColor
      }
    },
    right: {
      style: defaultCellBorderStyle,
      color: {
        argb: defaultCellBorderColor
      }
    }
  };
}

function exportXLSX(params) {
  var msgKey = 'xlsx';
  var $table = params.$table,
      options = params.options,
      columns = params.columns,
      colgroups = params.colgroups,
      datas = params.datas;
  var props = $table.props,
      reactData = $table.reactData;
  var allHeaderAlign = props.headerAlign,
      allAlign = props.align,
      allFooterAlign = props.footerAlign;
  var rowHeight = reactData.rowHeight;
  var message = options.message,
      sheetName = options.sheetName,
      isHeader = options.isHeader,
      isFooter = options.isFooter,
      isMerge = options.isMerge,
      isColgroup = options.isColgroup,
      original = options.original,
      useStyle = options.useStyle,
      sheetMethod = options.sheetMethod;
  var showMsg = message !== false;
  var mergeCells = $table.getMergeCells();
  var colList = [];
  var footList = [];
  var sheetCols = [];
  var sheetMerges = [];
  var beforeRowCount = 0;
  var colHead = {};
  columns.forEach(function (column) {
    var id = column.id,
        property = column.property,
        renderWidth = column.renderWidth;
    colHead[id] = original ? property : column.getTitle();
    sheetCols.push({
      key: id,
      width: XEUtils.ceil(renderWidth / 8, 1)
    });
  }); // 处理表头

  if (isHeader) {
    // 处理分组
    if (isColgroup && !original && colgroups) {
      colgroups.forEach(function (cols, rIndex) {
        var groupHead = {};
        columns.forEach(function (column) {
          groupHead[column.id] = null;
        });
        cols.forEach(function (column) {
          var _colSpan = column._colSpan,
              _rowSpan = column._rowSpan;
          var validColumn = getValidColumn(column);
          var columnIndex = columns.indexOf(validColumn);
          groupHead[validColumn.id] = original ? validColumn.property : column.getTitle();

          if (_colSpan > 1 || _rowSpan > 1) {
            sheetMerges.push({
              s: {
                r: rIndex,
                c: columnIndex
              },
              e: {
                r: rIndex + _rowSpan - 1,
                c: columnIndex + _colSpan - 1
              }
            });
          }
        });
        colList.push(groupHead);
      });
    } else {
      colList.push(colHead);
    }

    beforeRowCount += colList.length;
  } // 处理合并


  if (isMerge && !original) {
    mergeCells.forEach(function (mergeItem) {
      var mergeRowIndex = mergeItem.row,
          mergeRowspan = mergeItem.rowspan,
          mergeColIndex = mergeItem.col,
          mergeColspan = mergeItem.colspan;
      sheetMerges.push({
        s: {
          r: mergeRowIndex + beforeRowCount,
          c: mergeColIndex
        },
        e: {
          r: mergeRowIndex + beforeRowCount + mergeRowspan - 1,
          c: mergeColIndex + mergeColspan - 1
        }
      });
    });
  }

  var rowList = datas.map(function (item) {
    var rest = {};
    columns.forEach(function (column) {
      rest[column.id] = getCellLabel(column, item[column.id]);
    });
    return rest;
  });
  beforeRowCount += rowList.length; // 处理表尾

  if (isFooter) {
    var _$table$getTableData = $table.getTableData(),
        footerData = _$table$getTableData.footerData;

    var footers = getFooterData(options, footerData);
    var mergeFooterItems = $table.getMergeFooterItems(); // 处理合并

    if (isMerge && !original) {
      mergeFooterItems.forEach(function (mergeItem) {
        var mergeRowIndex = mergeItem.row,
            mergeRowspan = mergeItem.rowspan,
            mergeColIndex = mergeItem.col,
            mergeColspan = mergeItem.colspan;
        sheetMerges.push({
          s: {
            r: mergeRowIndex + beforeRowCount,
            c: mergeColIndex
          },
          e: {
            r: mergeRowIndex + beforeRowCount + mergeRowspan - 1,
            c: mergeColIndex + mergeColspan - 1
          }
        });
      });
    }

    footers.forEach(function (rows) {
      var item = {};
      columns.forEach(function (column) {
        item[column.id] = getFooterCellValue($table, options, rows, column);
      });
      footList.push(item);
    });
  }

  var exportMethod = function exportMethod() {
    var workbook = new ExcelJS.Workbook();
    var sheet = workbook.addWorksheet(sheetName);
    workbook.creator = 'vxe-table';
    sheet.columns = sheetCols;

    if (isHeader) {
      sheet.addRows(colList).forEach(function (excelRow) {
        if (useStyle) {
          setExcelRowHeight(excelRow, rowHeight);
        }

        excelRow.eachCell(function (excelCell) {
          var excelCol = sheet.getColumn(excelCell.col);
          var column = $table.getColumnById(excelCol.key);
          var headerAlign = column.headerAlign,
              align = column.align;
          setExcelCellStyle(excelCell, headerAlign || align || allHeaderAlign || allAlign);

          if (useStyle) {
            Object.assign(excelCell, {
              font: {
                bold: true,
                color: {
                  argb: defaultCellFontColor
                }
              },
              fill: {
                type: 'pattern',
                pattern: 'solid',
                fgColor: {
                  argb: defaultHeaderBackgroundColor
                }
              },
              border: getDefaultBorderStyle()
            });
          }
        });
      });
    }

    sheet.addRows(rowList).forEach(function (excelRow) {
      if (useStyle) {
        setExcelRowHeight(excelRow, rowHeight);
      }

      excelRow.eachCell(function (excelCell) {
        var excelCol = sheet.getColumn(excelCell.col);
        var column = $table.getColumnById(excelCol.key);
        var align = column.align;
        setExcelCellStyle(excelCell, align || allAlign);

        if (useStyle) {
          Object.assign(excelCell, {
            font: {
              color: {
                argb: defaultCellFontColor
              }
            },
            border: getDefaultBorderStyle()
          });
        }
      });
    });

    if (isFooter) {
      sheet.addRows(footList).forEach(function (excelRow) {
        if (useStyle) {
          setExcelRowHeight(excelRow, rowHeight);
        }

        excelRow.eachCell(function (excelCell) {
          var excelCol = sheet.getColumn(excelCell.col);
          var column = $table.getColumnById(excelCol.key);
          var footerAlign = column.footerAlign,
              align = column.align;
          setExcelCellStyle(excelCell, footerAlign || align || allFooterAlign || allAlign);

          if (useStyle) {
            Object.assign(excelCell, {
              font: {
                color: {
                  argb: defaultCellFontColor
                }
              },
              border: getDefaultBorderStyle()
            });
          }
        });
      });
    }

    if (useStyle && sheetMethod) {
      sheetMethod({
        options: options,
        workbook: workbook,
        worksheet: sheet,
        columns: columns,
        colgroups: colgroups,
        datas: datas,
        $table: $table
      });
    }

    sheetMerges.forEach(function (_ref) {
      var s = _ref.s,
          e = _ref.e;
      sheet.mergeCells(s.r + 1, s.c + 1, e.r + 1, e.c + 1);
    });
    workbook.xlsx.writeBuffer().then(function (buffer) {
      var blob = new Blob([buffer], {
        type: 'application/octet-stream'
      }); // 导出 xlsx

      downloadFile(params, blob, options);

      if (showMsg) {
        vxetable.modal.close(msgKey);
        vxetable.modal.message({
          message: vxetable.t('vxe.table.expSuccess'),
          status: 'success'
        });
      }
    });
  };

  if (showMsg) {
    vxetable.modal.message({
      id: msgKey,
      message: vxetable.t('vxe.table.expLoading'),
      status: 'loading',
      duration: -1
    });
    setTimeout(exportMethod, 1500);
  } else {
    exportMethod();
  }
}

function downloadFile(params, blob, options) {
  var message = options.message,
      filename = options.filename,
      type = options.type;
  var showMsg = message !== false;

  if (window.Blob) {
    var linkElem = document.createElement('a');
    linkElem.target = '_blank';
    linkElem.download = "".concat(filename, ".").concat(type);
    linkElem.href = URL.createObjectURL(blob);
    document.body.appendChild(linkElem);
    linkElem.click();
    document.body.removeChild(linkElem);
  } else {
    if (showMsg) {
      vxetable.modal.alert({
        message: vxetable.t('vxe.error.notExp'),
        status: 'error'
      });
    }
  }
}

function checkImportData(tableFields, fields) {
  return fields.some(function (field) {
    return tableFields.indexOf(field) > -1;
  });
}

function importError(params) {
  var $table = params.$table,
      options = params.options;
  var internalData = $table.internalData;
  var _importReject = internalData._importReject;
  var showMsg = options.message !== false;

  if (showMsg) {
    vxetable.modal.message({
      message: vxetable.t('vxe.error.impFields'),
      status: 'error'
    });
  }

  if (_importReject) {
    _importReject({
      status: false
    });
  }
}

function importXLSX(params) {
  var $table = params.$table,
      columns = params.columns,
      options = params.options,
      file = params.file;
  var internalData = $table.internalData;
  var _importResolve = internalData._importResolve;
  var showMsg = options.message !== false;
  var fileReader = new FileReader();

  fileReader.onerror = function () {
    importError(params);
  };

  fileReader.onload = function (evnt) {
    var tableFields = [];
    columns.forEach(function (column) {
      var field = column.property;

      if (field) {
        tableFields.push(field);
      }
    });
    var workbook = new ExcelJS.Workbook();
    var readerTarget = evnt.target;

    if (readerTarget) {
      workbook.xlsx.load(readerTarget.result).then(function (wb) {
        var firstSheet = wb.worksheets[0];

        if (firstSheet) {
          var sheetValues = firstSheet.getSheetValues();
          var fieldIndex = XEUtils.findIndexOf(sheetValues, function (list) {
            return list && list.length > 0;
          });
          var fields = sheetValues[fieldIndex];
          var status = checkImportData(tableFields, fields);

          if (status) {
            var records = sheetValues.slice(fieldIndex).map(function (list) {
              var item = {};
              list.forEach(function (cellValue, cIndex) {
                item[fields[cIndex]] = cellValue;
              });
              var record = {};
              tableFields.forEach(function (field) {
                record[field] = XEUtils.isUndefined(item[field]) ? null : item[field];
              });
              return record;
            });
            $table.createData(records).then(function (data) {
              var loadRest;

              if (options.mode === 'insert') {
                loadRest = $table.insertAt(data, -1);
              } else {
                loadRest = $table.reloadData(data);
              }

              return loadRest.then(function () {
                if (_importResolve) {
                  _importResolve({
                    status: true
                  });
                }
              });
            });

            if (showMsg) {
              vxetable.modal.message({
                message: vxetable.t('vxe.table.impSuccess', [records.length]),
                status: 'success'
              });
            }
          } else {
            importError(params);
          }
        } else {
          importError(params);
        }
      });
    } else {
      importError(params);
    }
  };

  fileReader.readAsArrayBuffer(file);
}

function handleImportEvent(params) {
  if (params.options.type === 'xlsx') {
    importXLSX(params);
    return false;
  }
}

function handleExportEvent(params) {
  if (params.options.type === 'xlsx') {
    exportXLSX(params);
    return false;
  }
}
/**
 * 基于 vxe-table 表格的增强插件，支持导出 xlsx 格式
 */


export var VXETablePluginExportXLSX = {
  install: function install(vxetablecore) {
    var setup = vxetablecore.setup,
        interceptor = vxetablecore.interceptor;
    vxetable = vxetablecore;
    setup({
      "export": {
        types: {
          xlsx: 0
        }
      }
    });
    interceptor.mixin({
      'event.import': handleImportEvent,
      'event.export': handleExportEvent
    });
  }
};

if (typeof window !== 'undefined' && window.VXETable) {
  window.VXETable.use(VXETablePluginExportXLSX);
}

export default VXETablePluginExportXLSX;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIiwiaW5kZXguanMiXSwibmFtZXMiOlsiWEVVdGlscyIsIkV4Y2VsSlMiLCJ2eGV0YWJsZSIsImRlZmF1bHRIZWFkZXJCYWNrZ3JvdW5kQ29sb3IiLCJkZWZhdWx0Q2VsbEZvbnRDb2xvciIsImRlZmF1bHRDZWxsQm9yZGVyU3R5bGUiLCJkZWZhdWx0Q2VsbEJvcmRlckNvbG9yIiwiZ2V0Q2VsbExhYmVsIiwiY29sdW1uIiwiY2VsbFZhbHVlIiwiY2VsbFR5cGUiLCJ0b1ZhbHVlU3RyaW5nIiwiaXNOYU4iLCJOdW1iZXIiLCJsZW5ndGgiLCJnZXRGb290ZXJEYXRhIiwib3B0cyIsImZvb3RlckRhdGEiLCJmb290ZXJGaWx0ZXJNZXRob2QiLCJmaWx0ZXIiLCJpdGVtcyIsImluZGV4IiwiJHJvd0luZGV4IiwiZ2V0Rm9vdGVyQ2VsbFZhbHVlIiwiJHRhYmxlIiwicm93cyIsImdldFZNQ29sdW1uSW5kZXgiLCJnZXRWYWxpZENvbHVtbiIsImNoaWxkTm9kZXMiLCJpc0NvbEdyb3VwIiwic2V0RXhjZWxSb3dIZWlnaHQiLCJleGNlbFJvdyIsImhlaWdodCIsImZsb29yIiwic2V0RXhjZWxDZWxsU3R5bGUiLCJleGNlbENlbGwiLCJhbGlnbiIsInByb3RlY3Rpb24iLCJsb2NrZWQiLCJhbGlnbm1lbnQiLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJnZXREZWZhdWx0Qm9yZGVyU3R5bGUiLCJ0b3AiLCJzdHlsZSIsImNvbG9yIiwiYXJnYiIsImxlZnQiLCJib3R0b20iLCJyaWdodCIsImV4cG9ydFhMU1giLCJwYXJhbXMiLCJtc2dLZXkiLCJvcHRpb25zIiwiY29sdW1ucyIsImNvbGdyb3VwcyIsImRhdGFzIiwicHJvcHMiLCJyZWFjdERhdGEiLCJhbGxIZWFkZXJBbGlnbiIsImhlYWRlckFsaWduIiwiYWxsQWxpZ24iLCJhbGxGb290ZXJBbGlnbiIsImZvb3RlckFsaWduIiwicm93SGVpZ2h0IiwibWVzc2FnZSIsInNoZWV0TmFtZSIsImlzSGVhZGVyIiwiaXNGb290ZXIiLCJpc01lcmdlIiwiaXNDb2xncm91cCIsIm9yaWdpbmFsIiwidXNlU3R5bGUiLCJzaGVldE1ldGhvZCIsInNob3dNc2ciLCJtZXJnZUNlbGxzIiwiZ2V0TWVyZ2VDZWxscyIsImNvbExpc3QiLCJmb290TGlzdCIsInNoZWV0Q29scyIsInNoZWV0TWVyZ2VzIiwiYmVmb3JlUm93Q291bnQiLCJjb2xIZWFkIiwiZm9yRWFjaCIsImlkIiwicHJvcGVydHkiLCJyZW5kZXJXaWR0aCIsImdldFRpdGxlIiwicHVzaCIsImtleSIsIndpZHRoIiwiY2VpbCIsImNvbHMiLCJySW5kZXgiLCJncm91cEhlYWQiLCJfY29sU3BhbiIsIl9yb3dTcGFuIiwidmFsaWRDb2x1bW4iLCJjb2x1bW5JbmRleCIsImluZGV4T2YiLCJzIiwiciIsImMiLCJlIiwibWVyZ2VJdGVtIiwibWVyZ2VSb3dJbmRleCIsInJvdyIsIm1lcmdlUm93c3BhbiIsInJvd3NwYW4iLCJtZXJnZUNvbEluZGV4IiwiY29sIiwibWVyZ2VDb2xzcGFuIiwiY29sc3BhbiIsInJvd0xpc3QiLCJtYXAiLCJpdGVtIiwicmVzdCIsImdldFRhYmxlRGF0YSIsImZvb3RlcnMiLCJtZXJnZUZvb3Rlckl0ZW1zIiwiZ2V0TWVyZ2VGb290ZXJJdGVtcyIsImV4cG9ydE1ldGhvZCIsIndvcmtib29rIiwiV29ya2Jvb2siLCJzaGVldCIsImFkZFdvcmtzaGVldCIsImNyZWF0b3IiLCJhZGRSb3dzIiwiZWFjaENlbGwiLCJleGNlbENvbCIsImdldENvbHVtbiIsImdldENvbHVtbkJ5SWQiLCJPYmplY3QiLCJhc3NpZ24iLCJmb250IiwiYm9sZCIsImZpbGwiLCJ0eXBlIiwicGF0dGVybiIsImZnQ29sb3IiLCJib3JkZXIiLCJ3b3Jrc2hlZXQiLCJ4bHN4Iiwid3JpdGVCdWZmZXIiLCJ0aGVuIiwiYnVmZmVyIiwiYmxvYiIsIkJsb2IiLCJkb3dubG9hZEZpbGUiLCJtb2RhbCIsImNsb3NlIiwidCIsInN0YXR1cyIsImR1cmF0aW9uIiwic2V0VGltZW91dCIsImZpbGVuYW1lIiwid2luZG93IiwibGlua0VsZW0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0YXJnZXQiLCJkb3dubG9hZCIsImhyZWYiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjbGljayIsInJlbW92ZUNoaWxkIiwiYWxlcnQiLCJjaGVja0ltcG9ydERhdGEiLCJ0YWJsZUZpZWxkcyIsImZpZWxkcyIsInNvbWUiLCJmaWVsZCIsImltcG9ydEVycm9yIiwiaW50ZXJuYWxEYXRhIiwiX2ltcG9ydFJlamVjdCIsImltcG9ydFhMU1giLCJmaWxlIiwiX2ltcG9ydFJlc29sdmUiLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsIm9uZXJyb3IiLCJvbmxvYWQiLCJldm50IiwicmVhZGVyVGFyZ2V0IiwibG9hZCIsInJlc3VsdCIsIndiIiwiZmlyc3RTaGVldCIsIndvcmtzaGVldHMiLCJzaGVldFZhbHVlcyIsImdldFNoZWV0VmFsdWVzIiwiZmllbGRJbmRleCIsImZpbmRJbmRleE9mIiwibGlzdCIsInJlY29yZHMiLCJzbGljZSIsImNJbmRleCIsInJlY29yZCIsImlzVW5kZWZpbmVkIiwiY3JlYXRlRGF0YSIsImRhdGEiLCJsb2FkUmVzdCIsIm1vZGUiLCJpbnNlcnRBdCIsInJlbG9hZERhdGEiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImhhbmRsZUltcG9ydEV2ZW50IiwiaGFuZGxlRXhwb3J0RXZlbnQiLCJWWEVUYWJsZVBsdWdpbkV4cG9ydFhMU1giLCJpbnN0YWxsIiwidnhldGFibGVjb3JlIiwic2V0dXAiLCJpbnRlcmNlcHRvciIsInR5cGVzIiwibWl4aW4iLCJWWEVUYWJsZSIsInVzZSJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsT0FBUCxNQUFvQixVQUFwQjtBQVFBLE9BQU9DLE9BQVAsTUFBb0IsU0FBcEI7QUFFQSxJQUFJQyxRQUFKO0FBaUJBLElBQU1DLDRCQUE0QixHQUFHLFFBQXJDO0FBQ0EsSUFBTUMsb0JBQW9CLEdB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ZW50IjpbImltcG9ydCBYRVV0aWxzIGZyb20gJ3hlLXV0aWxzJ1xuaW1wb3J0IHtcbiAgVlhFVGFibGVDb3JlLFxuICBWeGVUYWJsZUNvbnN0cnVjdG9yLFxuICBWeGVUYWJsZVByb3BUeXBlcyxcbiAgVnhlVGFibGVEZWZpbmVzLFxuICBWeGVHbG9iYWxJbnRlcmNlcHRvckhhbmRsZXNcbn0gZnJvbSAnQG9hL3Z4ZS10YWJsZSdcbmltcG9ydCBFeGNlbEpTIGZyb20gJ2V4Y2VsanMnXG5cbmxldCB2eGV0YWJsZTpWWEVUYWJsZUNvcmVcblxuZGVjbGFyZSBtb2R1bGUgJ0BvYS92eGUtdGFibGUnIHtcbiAgbmFtZXNwYWNlIFZ4ZVRhYmxlRGVmaW5lcyB7XG4gICAgaW50ZXJmYWNlIEV4dG9ydFNoZWV0TWV0aG9kUGFyYW1zIHtcbiAgICAgIHdvcmtib29rOiBFeGNlbEpTLldvcmtib29rO1xuICAgICAgd29ya3NoZWV0OiBFeGNlbEpTLldvcmtzaGVldDtcbiAgICB9XG4gICAgaW50ZXJmYWNlIENvbHVtbkluZm8ge1xuICAgICAgX3JvdzogYW55O1xuICAgICAgX2NvbFNwYW46IG51bWJlcjtcbiAgICAgIF9yb3dTcGFuOiBudW1iZXI7XG4gICAgICBjaGlsZE5vZGVzOiBWeGVUYWJsZURlZmluZXMuQ29sdW1uSW5mb1tdO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBkZWZhdWx0SGVhZGVyQmFja2dyb3VuZENvbG9yID0gJ2Y4ZjhmOSdcbmNvbnN0IGRlZmF1bHRDZWxsRm9udENvbG9yID0gJzYwNjI2NidcbmNvbnN0IGRlZmF1bHRDZWxsQm9yZGVyU3R5bGUgPSAndGhpbidcbmNvbnN0IGRlZmF1bHRDZWxsQm9yZGVyQ29sb3IgPSAnZThlYWVjJ1xuXG5mdW5jdGlvbiBnZXRDZWxsTGFiZWwgKGNvbHVtbjogVnhlVGFibGVEZWZpbmVzLkNvbHVtbkluZm8sIGNlbGxWYWx1ZTogYW55KSB7XG4gIGlmIChjZWxsVmFsdWUpIHtcbiAgICBzd2l0Y2ggKGNvbHVtbi5jZWxsVHlwZSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIFhFVXRpbHMudG9WYWx1ZVN0cmluZyhjZWxsVmFsdWUpXG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBpZiAoIWlzTmFOKGNlbGxWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKGNlbGxWYWx1ZSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGNlbGxWYWx1ZS5sZW5ndGggPCAxMiAmJiAhaXNOYU4oY2VsbFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBOdW1iZXIoY2VsbFZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiBjZWxsVmFsdWVcbn1cblxuZnVuY3Rpb24gZ2V0Rm9vdGVyRGF0YSAob3B0czogVnhlVGFibGVQcm9wVHlwZXMuRXhwb3J0Q29uZmlnLCBmb290ZXJEYXRhOiBhbnlbXVtdKSB7XG4gIGNvbnN0IHsgZm9vdGVyRmlsdGVyTWV0aG9kIH0gPSBvcHRzXG4gIHJldHVybiBmb290ZXJGaWx0ZXJNZXRob2QgPyBmb290ZXJEYXRhLmZpbHRlcigoaXRlbXMsIGluZGV4KSA9PiBmb290ZXJGaWx0ZXJNZXRob2QoeyBpdGVtcywgJHJvd0luZGV4OiBpbmRleCB9KSkgOiBmb290ZXJEYXRhXG59XG5cbmZ1bmN0aW9uIGdldEZvb3RlckNlbGxWYWx1ZSAoJHRhYmxlOiBWeGVUYWJsZUNvbnN0cnVjdG9yLCBvcHRzOiBWeGVUYWJsZVByb3BUeXBlcy5FeHBvcnRDb25maWcsIHJvd3M6IGFueVtdLCBjb2x1bW46IFZ4ZVRhYmxlRGVmaW5lcy5Db2x1bW5JbmZvKSB7XG4gIGNvbnN0IGNlbGxWYWx1ZSA9IGdldENlbGxMYWJlbChjb2x1bW4sIHJvd3NbJHRhYmxlLmdldFZNQ29sdW1uSW5kZXgoY29sdW1uKV0pXG4gIHJldHVybiBjZWxsVmFsdWVcbn1cblxuZnVuY3Rpb24gZ2V0VmFsaWRDb2x1bW4gKGNvbHVtbjogVnhlVGFibGVEZWZpbmVzLkNvbHVtbkluZm8pOiBWeGVUYWJsZURlZmluZXMuQ29sdW1uSW5mbyB7XG4gIGNvbnN0IHsgY2hpbGROb2RlcyB9ID0gY29sdW1uXG4gIGNvbnN0IGlzQ29sR3JvdXAgPSBjaGlsZE5vZGVzICYmIGNoaWxkTm9kZXMubGVuZ3RoXG4gIGlmIChpc0NvbEdyb3VwKSB7XG4gICAgcmV0dXJuIGdldFZhbGlkQ29sdW1uKGNoaWxkTm9kZXNbMF0pXG4gIH1cbiAgcmV0dXJuIGNvbHVtblxufVxuXG5mdW5jdGlvbiBzZXRFeGNlbFJvd0hlaWdodCAoZXhjZWxSb3c6IEV4Y2VsSlMuUm93LCBoZWlnaHQ6IG51bWJlcikge1xuICBpZiAoaGVpZ2h0KSB7XG4gICAgZXhjZWxSb3cuaGVpZ2h0ID0gWEVVdGlscy5mbG9vcihoZWlnaHQgKiAwLjc1LCAxMilcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRFeGNlbENlbGxTdHlsZSAoZXhjZWxDZWxsOiBFeGNlbEpTLkNlbGwsIGFsaWduPzogVnhlVGFibGVQcm9wVHlwZXMuQWxpZ24gfCBWeGVUYWJsZVByb3BUeXBlcy5IZWFkZXJBbGlnbiB8IFZ4ZVRhYmxlUHJvcFR5cGVzLkZvb3RlckFsaWduKSB7XG4gIGV4Y2VsQ2VsbC5wcm90ZWN0aW9uID0ge1xuICAgIGxvY2tlZDogZmFsc2VcbiAgfVxuICBleGNlbENlbGwuYWxpZ25tZW50ID0ge1xuICAgIHZlcnRpY2FsOiAnbWlkZGxlJyxcbiAgICBob3Jpem9udGFsOiBhbGlnbiB8fCAnbGVmdCdcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0Qm9yZGVyU3R5bGUgKCkge1xuICByZXR1cm4ge1xuICAgIHRvcDoge1xuICAgICAgc3R5bGU6IGRlZmF1bHRDZWxsQm9yZGVyU3R5bGUsXG4gICAgICBjb2xvcjoge1xuICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEJvcmRlckNvbG9yXG4gICAgICB9XG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICBzdHlsZTogZGVmYXVsdENlbGxCb3JkZXJTdHlsZSxcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIGFyZ2I6IGRlZmF1bHRDZWxsQm9yZGVyQ29sb3JcbiAgICAgIH1cbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgc3R5bGU6IGRlZmF1bHRDZWxsQm9yZGVyU3R5bGUsXG4gICAgICBjb2xvcjoge1xuICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEJvcmRlckNvbG9yXG4gICAgICB9XG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgc3R5bGU6IGRlZmF1bHRDZWxsQm9yZGVyU3R5bGUsXG4gICAgICBjb2xvcjoge1xuICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEJvcmRlckNvbG9yXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4cG9ydFhMU1ggKHBhcmFtczogVnhlR2xvYmFsSW50ZXJjZXB0b3JIYW5kbGVzLkludGVyY2VwdG9yRXhwb3J0UGFyYW1zKSB7XG4gIGNvbnN0IG1zZ0tleSA9ICd4bHN4J1xuICBjb25zdCB7ICR0YWJsZSwgb3B0aW9ucywgY29sdW1ucywgY29sZ3JvdXBzLCBkYXRhcyB9ID0gcGFyYW1zXG4gIGNvbnN0IHsgcHJvcHMsIHJlYWN0RGF0YSB9ID0gJHRhYmxlXG4gIGNvbnN0IHsgaGVhZGVyQWxpZ246IGFsbEhlYWRlckFsaWduLCBhbGlnbjogYWxsQWxpZ24sIGZvb3RlckFsaWduOiBhbGxGb290ZXJBbGlnbiB9ID0gcHJvcHNcbiAgY29uc3QgeyByb3dIZWlnaHQgfSA9IHJlYWN0RGF0YVxuICBjb25zdCB7IG1lc3NhZ2UsIHNoZWV0TmFtZSwgaXNIZWFkZXIsIGlzRm9vdGVyLCBpc01lcmdlLCBpc0NvbGdyb3VwLCBvcmlnaW5hbCwgdXNlU3R5bGUsIHNoZWV0TWV0aG9kIH0gPSBvcHRpb25zXG4gIGNvbnN0IHNob3dNc2cgPSBtZXNzYWdlICE9PSBmYWxzZVxuICBjb25zdCBtZXJnZUNlbGxzID0gJHRhYmxlLmdldE1lcmdlQ2VsbHMoKVxuICBjb25zdCBjb2xMaXN0OiBhbnlbXSA9IFtdXG4gIGNvbnN0IGZvb3RMaXN0OiBhbnlbXSA9IFtdXG4gIGNvbnN0IHNoZWV0Q29sczogYW55W10gPSBbXVxuICBjb25zdCBzaGVldE1lcmdlczogeyBzOiB7IHI6IG51bWJlciwgYzogbnVtYmVyIH0sIGU6IHsgcjogbnVtYmVyLCBjOiBudW1iZXIgfSB9W10gPSBbXVxuICBsZXQgYmVmb3JlUm93Q291bnQgPSAwXG4gIGNvbnN0IGNvbEhlYWQ6IGFueSA9IHt9XG4gIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgY29uc3QgeyBpZCwgcHJvcGVydHksIHJlbmRlcldpZHRoIH0gPSBjb2x1bW5cbiAgICBjb2xIZWFkW2lkXSA9IG9yaWdpbmFsID8gcHJvcGVydHkgOiBjb2x1bW4uZ2V0VGl0bGUoKVxuICAgIHNoZWV0Q29scy5wdXNoKHtcbiAgICAgIGtleTogaWQsXG4gICAgICB3aWR0aDogWEVVdGlscy5jZWlsKHJlbmRlcldpZHRoIC8gOCwgMSlcbiAgICB9KVxuICB9KVxuICAvLyDlpITnkIbooajlpLRcbiAgaWYgKGlzSGVhZGVyKSB7XG4gICAgLy8g5aSE55CG5YiG57uEXG4gICAgaWYgKGlzQ29sZ3JvdXAgJiYgIW9yaWdpbmFsICYmIGNvbGdyb3Vwcykge1xuICAgICAgY29sZ3JvdXBzLmZvckVhY2goKGNvbHMsIHJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBncm91cEhlYWQ6IGFueSA9IHt9XG4gICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICAgICAgZ3JvdXBIZWFkW2NvbHVtbi5pZF0gPSBudWxsXG4gICAgICAgIH0pXG4gICAgICAgIGNvbHMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBfY29sU3BhbiwgX3Jvd1NwYW4gfSA9IGNvbHVtblxuICAgICAgICAgIGNvbnN0IHZhbGlkQ29sdW1uID0gZ2V0VmFsaWRDb2x1bW4oY29sdW1uKVxuICAgICAgICAgIGNvbnN0IGNvbHVtbkluZGV4ID0gY29sdW1ucy5pbmRleE9mKHZhbGlkQ29sdW1uKVxuICAgICAgICAgIGdyb3VwSGVhZFt2YWxpZENvbHVtbi5pZF0gPSBvcmlnaW5hbCA/IHZhbGlkQ29sdW1uLnByb3BlcnR5IDogY29sdW1uLmdldFRpdGxlKClcbiAgICAgICAgICBpZiAoX2NvbFNwYW4gPiAxIHx8IF9yb3dTcGFuID4gMSkge1xuICAgICAgICAgICAgc2hlZXRNZXJnZXMucHVzaCh7XG4gICAgICAgICAgICAgIHM6IHsgcjogckluZGV4LCBjOiBjb2x1bW5JbmRleCB9LFxuICAgICAgICAgICAgICBlOiB7IHI6IHJJbmRleCArIF9yb3dTcGFuIC0gMSwgYzogY29sdW1uSW5kZXggKyBfY29sU3BhbiAtIDEgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGNvbExpc3QucHVzaChncm91cEhlYWQpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb2xMaXN0LnB1c2goY29sSGVhZClcbiAgICB9XG4gICAgYmVmb3JlUm93Q291bnQgKz0gY29sTGlzdC5sZW5ndGhcbiAgfVxuICAvLyDlpITnkIblkIjlubZcbiAgaWYgKGlzTWVyZ2UgJiYgIW9yaWdpbmFsKSB7XG4gICAgbWVyZ2VDZWxscy5mb3JFYWNoKG1lcmdlSXRlbSA9PiB7XG4gICAgICBjb25zdCB7IHJvdzogbWVyZ2VSb3dJbmRleCwgcm93c3BhbjogbWVyZ2VSb3dzcGFuLCBjb2w6IG1lcmdlQ29sSW5kZXgsIGNvbHNwYW46IG1lcmdlQ29sc3BhbiB9ID0gbWVyZ2VJdGVtXG4gICAgICBzaGVldE1lcmdlcy5wdXNoKHtcbiAgICAgICAgczogeyByOiBtZXJnZVJvd0luZGV4ICsgYmVmb3JlUm93Q291bnQsIGM6IG1lcmdlQ29sSW5kZXggfSxcbiAgICAgICAgZTogeyByOiBtZXJnZVJvd0luZGV4ICsgYmVmb3JlUm93Q291bnQgKyBtZXJnZVJvd3NwYW4gLSAxLCBjOiBtZXJnZUNvbEluZGV4ICsgbWVyZ2VDb2xzcGFuIC0gMSB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgY29uc3Qgcm93TGlzdCA9IGRhdGFzLm1hcChpdGVtID0+IHtcbiAgICBjb25zdCByZXN0OiBhbnkgPSB7fVxuICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICByZXN0W2NvbHVtbi5pZF0gPSBnZXRDZWxsTGFiZWwoY29sdW1uLCBpdGVtW2NvbHVtbi5pZF0pXG4gICAgfSlcbiAgICByZXR1cm4gcmVzdFxuICB9KVxuICBiZWZvcmVSb3dDb3VudCArPSByb3dMaXN0Lmxlbmd0aFxuICAvLyDlpITnkIbooajlsL5cbiAgaWYgKGlzRm9vdGVyKSB7XG4gICAgY29uc3QgeyBmb290ZXJEYXRhIH0gPSAkdGFibGUuZ2V0VGFibGVEYXRhKClcbiAgICBjb25zdCBmb290ZXJzID0gZ2V0Rm9vdGVyRGF0YShvcHRpb25zLCBmb290ZXJEYXRhKVxuICAgIGNvbnN0IG1lcmdlRm9vdGVySXRlbXMgPSAkdGFibGUuZ2V0TWVyZ2VGb290ZXJJdGVtcygpXG4gICAgLy8g5aSE55CG5ZCI5bm2XG4gICAgaWYgKGlzTWVyZ2UgJiYgIW9yaWdpbmFsKSB7XG4gICAgICBtZXJnZUZvb3Rlckl0ZW1zLmZvckVhY2gobWVyZ2VJdGVtID0+IHtcbiAgICAgICAgY29uc3QgeyByb3c6IG1lcmdlUm93SW5kZXgsIHJvd3NwYW46IG1lcmdlUm93c3BhbiwgY29sOiBtZXJnZUNvbEluZGV4LCBjb2xzcGFuOiBtZXJnZUNvbHNwYW4gfSA9IG1lcmdlSXRlbVxuICAgICAgICBzaGVldE1lcmdlcy5wdXNoKHtcbiAgICAgICAgICBzOiB7IHI6IG1lcmdlUm93SW5kZXggKyBiZWZvcmVSb3dDb3VudCwgYzogbWVyZ2VDb2xJbmRleCB9LFxuICAgICAgICAgIGU6IHsgcjogbWVyZ2VSb3dJbmRleCArIGJlZm9yZVJvd0NvdW50ICsgbWVyZ2VSb3dzcGFuIC0gMSwgYzogbWVyZ2VDb2xJbmRleCArIG1lcmdlQ29sc3BhbiAtIDEgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gICAgZm9vdGVycy5mb3JFYWNoKChyb3dzKSA9PiB7XG4gICAgICBjb25zdCBpdGVtOiBhbnkgPSB7fVxuICAgICAgY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgaXRlbVtjb2x1bW4uaWRdID0gZ2V0Rm9vdGVyQ2VsbFZhbHVlKCR0YWJsZSwgb3B0aW9ucywgcm93cywgY29sdW1uKVxuICAgICAgfSlcbiAgICAgIGZvb3RMaXN0LnB1c2goaXRlbSlcbiAgICB9KVxuICB9XG4gIGNvbnN0IGV4cG9ydE1ldGhvZCA9ICgpID0+IHtcbiAgICBjb25zdCB3b3JrYm9vayA9IG5ldyBFeGNlbEpTLldvcmtib29rKClcbiAgICBjb25zdCBzaGVldCA9IHdvcmtib29rLmFkZFdvcmtzaGVldChzaGVldE5hbWUpXG4gICAgd29ya2Jvb2suY3JlYXRvciA9ICd2eGUtdGFibGUnXG4gICAgc2hlZXQuY29sdW1ucyA9IHNoZWV0Q29sc1xuICAgIGlmIChpc0hlYWRlcikge1xuICAgICAgc2hlZXQuYWRkUm93cyhjb2xMaXN0KS5mb3JFYWNoKGV4Y2VsUm93ID0+IHtcbiAgICAgICAgaWYgKHVzZVN0eWxlKSB7XG4gICAgICAgICAgc2V0RXhjZWxSb3dIZWlnaHQoZXhjZWxSb3csIHJvd0hlaWdodClcbiAgICAgICAgfVxuICAgICAgICBleGNlbFJvdy5lYWNoQ2VsbChleGNlbENlbGwgPT4ge1xuICAgICAgICAgIGNvbnN0IGV4Y2VsQ29sID0gc2hlZXQuZ2V0Q29sdW1uKGV4Y2VsQ2VsbC5jb2wpXG4gICAgICAgICAgY29uc3QgY29sdW1uOiBhbnkgPSAkdGFibGUuZ2V0Q29sdW1uQnlJZChleGNlbENvbC5rZXkgYXMgc3RyaW5nKVxuICAgICAgICAgIGNvbnN0IHsgaGVhZGVyQWxpZ24sIGFsaWduIH0gPSBjb2x1bW5cbiAgICAgICAgICBzZXRFeGNlbENlbGxTdHlsZShleGNlbENlbGwsIGhlYWRlckFsaWduIHx8IGFsaWduIHx8IGFsbEhlYWRlckFsaWduIHx8IGFsbEFsaWduKVxuICAgICAgICAgIGlmICh1c2VTdHlsZSkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihleGNlbENlbGwsIHtcbiAgICAgICAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgICAgIGJvbGQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgICAgICAgIGFyZ2I6IGRlZmF1bHRDZWxsRm9udENvbG9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3BhdHRlcm4nLFxuICAgICAgICAgICAgICAgIHBhdHRlcm46ICdzb2xpZCcsXG4gICAgICAgICAgICAgICAgZmdDb2xvcjoge1xuICAgICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdEhlYWRlckJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYm9yZGVyOiBnZXREZWZhdWx0Qm9yZGVyU3R5bGUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cbiAgICBzaGVldC5hZGRSb3dzKHJvd0xpc3QpLmZvckVhY2goZXhjZWxSb3cgPT4ge1xuICAgICAgaWYgKHVzZVN0eWxlKSB7XG4gICAgICAgIHNldEV4Y2VsUm93SGVpZ2h0KGV4Y2VsUm93LCByb3dIZWlnaHQpXG4gICAgICB9XG4gICAgICBleGNlbFJvdy5lYWNoQ2VsbChleGNlbENlbGwgPT4ge1xuICAgICAgICBjb25zdCBleGNlbENvbCA9IHNoZWV0LmdldENvbHVtbihleGNlbENlbGwuY29sKVxuICAgICAgICBjb25zdCBjb2x1bW46IGFueSA9ICR0YWJsZS5nZXRDb2x1bW5CeUlkKGV4Y2VsQ29sLmtleSBhcyBzdHJpbmcpXG4gICAgICAgIGNvbnN0IHsgYWxpZ24gfSA9IGNvbHVtblxuICAgICAgICBzZXRFeGNlbENlbGxTdHlsZShleGNlbENlbGwsIGFsaWduIHx8IGFsbEFsaWduKVxuICAgICAgICBpZiAodXNlU3R5bGUpIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGV4Y2VsQ2VsbCwge1xuICAgICAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgIGFyZ2I6IGRlZmF1bHRDZWxsRm9udENvbG9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib3JkZXI6IGdldERlZmF1bHRCb3JkZXJTdHlsZSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICAgIGlmIChpc0Zvb3Rlcikge1xuICAgICAgc2hlZXQuYWRkUm93cyhmb290TGlzdCkuZm9yRWFjaChleGNlbFJvdyA9PiB7XG4gICAgICAgIGlmICh1c2VTdHlsZSkge1xuICAgICAgICAgIHNldEV4Y2VsUm93SGVpZ2h0KGV4Y2VsUm93LCByb3dIZWlnaHQpXG4gICAgICAgIH1cbiAgICAgICAgZXhjZWxSb3cuZWFjaENlbGwoZXhjZWxDZWxsID0+IHtcbiAgICAgICAgICBjb25zdCBleGNlbENvbCA9IHNoZWV0LmdldENvbHVtbihleGNlbENlbGwuY29sKVxuICAgICAgICAgIGNvbnN0IGNvbHVtbjogYW55ID0gJHRhYmxlLmdldENvbHVtbkJ5SWQoZXhjZWxDb2wua2V5IGFzIHN0cmluZylcbiAgICAgICAgICBjb25zdCB7IGZvb3RlckFsaWduLCBhbGlnbiB9ID0gY29sdW1uXG4gICAgICAgICAgc2V0RXhjZWxDZWxsU3R5bGUoZXhjZWxDZWxsLCBmb290ZXJBbGlnbiB8fCBhbGlnbiB8fCBhbGxGb290ZXJBbGlnbiB8fCBhbGxBbGlnbilcbiAgICAgICAgICBpZiAodXNlU3R5bGUpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZXhjZWxDZWxsLCB7XG4gICAgICAgICAgICAgIGZvbnQ6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdENlbGxGb250Q29sb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJvcmRlcjogZ2V0RGVmYXVsdEJvcmRlclN0eWxlKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHVzZVN0eWxlICYmIHNoZWV0TWV0aG9kKSB7XG4gICAgICBzaGVldE1ldGhvZCh7IG9wdGlvbnM6IG9wdGlvbnMsIHdvcmtib29rLCB3b3Jrc2hlZXQ6IHNoZWV0LCBjb2x1bW5zLCBjb2xncm91cHMsIGRhdGFzLCAkdGFibGUgfSlcbiAgICB9XG4gICAgc2hlZXRNZXJnZXMuZm9yRWFjaCgoeyBzLCBlIH0pID0+IHtcbiAgICAgIHNoZWV0Lm1lcmdlQ2VsbHMocy5yICsgMSwgcy5jICsgMSwgZS5yICsgMSwgZS5jICsgMSlcbiAgICB9KVxuICAgIHdvcmtib29rLnhsc3gud3JpdGVCdWZmZXIoKS50aGVuKGJ1ZmZlciA9PiB7XG4gICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0pXG4gICAgICAvLyDlr7zlh7ogeGxzeFxuICAgICAgZG93bmxvYWRGaWxlKHBhcmFtcywgYmxvYiwgb3B0aW9ucylcbiAgICAgIGlmIChzaG93TXNnKSB7XG4gICAgICAgIHZ4ZXRhYmxlLm1vZGFsLmNsb3NlKG1zZ0tleSlcbiAgICAgICAgdnhldGFibGUubW9kYWwubWVzc2FnZSh7IG1lc3NhZ2U6IHZ4ZXRhYmxlLnQoJ3Z4ZS50YWJsZS5leHBTdWNjZXNzJyksIHN0YXR1czogJ3N1Y2Nlc3MnIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuICBpZiAoc2hvd01zZykge1xuICAgIHZ4ZXRhYmxlLm1vZGFsLm1lc3NhZ2UoeyBpZDogbXNnS2V5LCBtZXNzYWdlOiB2eGV0YWJsZS50KCd2eGUudGFibGUuZXhwTG9hZGluZycpLCBzdGF0dXM6ICdsb2FkaW5nJywgZHVyYXRpb246IC0xIH0pXG4gICAgc2V0VGltZW91dChleHBvcnRNZXRob2QsIDE1MDApXG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0TWV0aG9kKClcbiAgfVxufVxuXG5mdW5jdGlvbiBkb3dubG9hZEZpbGUgKHBhcmFtczogVnhlR2xvYmFsSW50ZXJjZXB0b3JIYW5kbGVzLkludGVyY2VwdG9yRXhwb3J0UGFyYW1zLCBibG9iOiBCbG9iLCBvcHRpb25zOiBWeGVUYWJsZVByb3BUeXBlcy5FeHBvcnRDb25maWcpIHtcbiAgY29uc3QgeyBtZXNzYWdlLCBmaWxlbmFtZSwgdHlwZSB9ID0gb3B0aW9uc1xuICBjb25zdCBzaG93TXNnID0gbWVzc2FnZSAhPT0gZmFsc2VcbiAgaWYgKHdpbmRvdy5CbG9iKSB7XG4gICAgY29uc3QgbGlua0VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcbiAgICBsaW5rRWxlbS50YXJnZXQgPSAnX2JsYW5rJ1xuICAgIGxpbmtFbGVtLmRvd25sb2FkID0gYCR7ZmlsZW5hbWV9LiR7dHlwZX1gXG4gICAgbGlua0VsZW0uaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYilcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmtFbGVtKVxuICAgIGxpbmtFbGVtLmNsaWNrKClcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmtFbGVtKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaG93TXNnKSB7XG4gICAgICB2eGV0YWJsZS5tb2RhbC5hbGVydCh7IG1lc3NhZ2U6IHZ4ZXRhYmxlLnQoJ3Z4ZS5lcnJvci5ub3RFeHAnKSwgc3RhdHVzOiAnZXJyb3InIH0pXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW1wb3J0RGF0YSAodGFibGVGaWVsZHM6IHN0cmluZ1tdLCBmaWVsZHM6IHN0cmluZ1tdKSB7XG4gIHJldHVybiBmaWVsZHMuc29tZShmaWVsZCA9PiB0YWJsZUZpZWxkcy5pbmRleE9mKGZpZWxkKSA+IC0xKVxufVxuXG5mdW5jdGlvbiBpbXBvcnRFcnJvciAocGFyYW1zOiBWeGVHbG9iYWxJbnRlcmNlcHRvckhhbmRsZXMuSW50ZXJjZXB0b3JJbXBvcnRQYXJhbXMpIHtcbiAgY29uc3QgeyAkdGFibGUsIG9wdGlvbnMgfSA9IHBhcmFtc1xuICBjb25zdCB7IGludGVybmFsRGF0YSB9ID0gJHRhYmxlXG4gIGNvbnN0IHsgX2ltcG9ydFJlamVjdCB9ID0gaW50ZXJuYWxEYXRhXG4gIGNvbnN0IHNob3dNc2cgPSBvcHRpb25zLm1lc3NhZ2UgIT09IGZhbHNlXG4gIGlmIChzaG93TXNnKSB7XG4gICAgdnhldGFibGUubW9kYWwubWVzc2FnZSh7IG1lc3NhZ2U6IHZ4ZXRhYmxlLnQoJ3Z4ZS5lcnJvci5pbXBGaWVsZHMnKSwgc3RhdHVzOiAnZXJyb3InIH0pXG4gIH1cbiAgaWYgKF9pbXBvcnRSZWplY3QpIHtcbiAgICBfaW1wb3J0UmVqZWN0KHsgc3RhdHVzOiBmYWxzZSB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGltcG9ydFhMU1ggKHBhcmFtczogVnhlR2xvYmFsSW50ZXJjZXB0b3JIYW5kbGVzLkludGVyY2VwdG9ySW1wb3J0UGFyYW1zKSB7XG4gIGNvbnN0IHsgJHRhYmxlLCBjb2x1bW5zLCBvcHRpb25zLCBmaWxlIH0gPSBwYXJhbXNcbiAgY29uc3QgeyBpbnRlcm5hbERhdGEgfSA9ICR0YWJsZVxuICBjb25zdCB7IF9pbXBvcnRSZXNvbHZlIH0gPSBpbnRlcm5hbERhdGFcbiAgY29uc3Qgc2hvd01zZyA9IG9wdGlvbnMubWVzc2FnZSAhPT0gZmFsc2VcbiAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgZmlsZVJlYWRlci5vbmVycm9yID0gKCkgPT4ge1xuICAgIGltcG9ydEVycm9yKHBhcmFtcylcbiAgfVxuICBmaWxlUmVhZGVyLm9ubG9hZCA9IChldm50KSA9PiB7XG4gICAgY29uc3QgdGFibGVGaWVsZHM6IHN0cmluZ1tdID0gW11cbiAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgY29uc3QgZmllbGQgPSBjb2x1bW4ucHJvcGVydHlcbiAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICB0YWJsZUZpZWxkcy5wdXNoKGZpZWxkKVxuICAgICAgfVxuICAgIH0pXG4gICAgY29uc3Qgd29ya2Jvb2sgPSBuZXcgRXhjZWxKUy5Xb3JrYm9vaygpXG4gICAgY29uc3QgcmVhZGVyVGFyZ2V0ID0gZXZudC50YXJnZXRcbiAgICBpZiAocmVhZGVyVGFyZ2V0KSB7XG4gICAgICB3b3JrYm9vay54bHN4LmxvYWQocmVhZGVyVGFyZ2V0LnJlc3VsdCBhcyBBcnJheUJ1ZmZlcikudGhlbih3YiA9PiB7XG4gICAgICAgIGNvbnN0IGZpcnN0U2hlZXQgPSB3Yi53b3Jrc2hlZXRzWzBdXG4gICAgICAgIGlmIChmaXJzdFNoZWV0KSB7XG4gICAgICAgICAgY29uc3Qgc2hlZXRWYWx1ZXMgPSBmaXJzdFNoZWV0LmdldFNoZWV0VmFsdWVzKCkgYXMgc3RyaW5nW11bXVxuICAgICAgICAgIGNvbnN0IGZpZWxkSW5kZXggPSBYRVV0aWxzLmZpbmRJbmRleE9mKHNoZWV0VmFsdWVzLCAobGlzdDogc3RyaW5nW10pID0+IGxpc3QgJiYgbGlzdC5sZW5ndGggPiAwKVxuICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHNoZWV0VmFsdWVzW2ZpZWxkSW5kZXhdIGFzIHN0cmluZ1tdXG4gICAgICAgICAgY29uc3Qgc3RhdHVzID0gY2hlY2tJbXBvcnREYXRhKHRhYmxlRmllbGRzLCBmaWVsZHMpXG4gICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgY29uc3QgcmVjb3JkcyA9IHNoZWV0VmFsdWVzLnNsaWNlKGZpZWxkSW5kZXgpLm1hcChsaXN0ID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgaXRlbSA6IGFueSA9IHt9XG4gICAgICAgICAgICAgIGxpc3QuZm9yRWFjaCgoY2VsbFZhbHVlLCBjSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtW2ZpZWxkc1tjSW5kZXhdXSA9IGNlbGxWYWx1ZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBjb25zdCByZWNvcmQ6IGFueSA9IHt9XG4gICAgICAgICAgICAgIHRhYmxlRmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgICAgICAgIHJlY29yZFtmaWVsZF0gPSBYRVV0aWxzLmlzVW5kZWZpbmVkKGl0ZW1bZmllbGRdKSA/IG51bGwgOiBpdGVtW2ZpZWxkXVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgJHRhYmxlLmNyZWF0ZURhdGEocmVjb3JkcylcbiAgICAgICAgICAgICAgLnRoZW4oKGRhdGE6IGFueVtdKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGxvYWRSZXN0OiBQcm9taXNlPGFueT5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tb2RlID09PSAnaW5zZXJ0Jykge1xuICAgICAgICAgICAgICAgICAgbG9hZFJlc3QgPSAkdGFibGUuaW5zZXJ0QXQoZGF0YSwgLTEpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGxvYWRSZXN0ID0gJHRhYmxlLnJlbG9hZERhdGEoZGF0YSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRSZXN0LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKF9pbXBvcnRSZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pbXBvcnRSZXNvbHZlKHsgc3RhdHVzOiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChzaG93TXNnKSB7XG4gICAgICAgICAgICAgIHZ4ZXRhYmxlLm1vZGFsLm1lc3NhZ2UoeyBtZXNzYWdlOiB2eGV0YWJsZS50KCd2eGUudGFibGUuaW1wU3VjY2VzcycsIFtyZWNvcmRzLmxlbmd0aF0pLCBzdGF0dXM6ICdzdWNjZXNzJyB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbXBvcnRFcnJvcihwYXJhbXMpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGltcG9ydEVycm9yKHBhcmFtcylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgaW1wb3J0RXJyb3IocGFyYW1zKVxuICAgIH1cbiAgfVxuICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpXG59XG5cbmZ1bmN0aW9uIGhhbmRsZUltcG9ydEV2ZW50IChwYXJhbXM6IFZ4ZUdsb2JhbEludGVyY2VwdG9ySGFuZGxlcy5JbnRlcmNlcHRvckltcG9ydFBhcmFtcykge1xuICBpZiAocGFyYW1zLm9wdGlvbnMudHlwZSA9PT0gJ3hsc3gnKSB7XG4gICAgaW1wb3J0WExTWChwYXJhbXMpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRXhwb3J0RXZlbnQgKHBhcmFtczogVnhlR2xvYmFsSW50ZXJjZXB0b3JIYW5kbGVzLkludGVyY2VwdG9yRXhwb3J0UGFyYW1zKSB7XG4gIGlmIChwYXJhbXMub3B0aW9ucy50eXBlID09PSAneGxzeCcpIHtcbiAgICBleHBvcnRYTFNYKHBhcmFtcylcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIOWfuuS6jiB2eGUtdGFibGUg6KGo5qC855qE5aKe5by65o+S5Lu277yM5pSv5oyB5a+85Ye6IHhsc3gg5qC85byPXG4gKi9cbmV4cG9ydCBjb25zdCBWWEVUYWJsZVBsdWdpbkV4cG9ydFhMU1ggPSB7XG4gIGluc3RhbGwgKHZ4ZXRhYmxlY29yZTogVlhFVGFibGVDb3JlKSB7XG4gICAgY29uc3QgeyBzZXR1cCwgaW50ZXJjZXB0b3IgfSA9IHZ4ZXRhYmxlY29yZVxuXG4gICAgdnhldGFibGUgPSB2eGV0YWJsZWNvcmVcblxuICAgIHNldHVwKHtcbiAgICAgIGV4cG9ydDoge1xuICAgICAgICB0eXBlczoge1xuICAgICAgICAgIHhsc3g6IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgaW50ZXJjZXB0b3IubWl4aW4oe1xuICAgICAgJ2V2ZW50LmltcG9ydCc6IGhhbmRsZUltcG9ydEV2ZW50LFxuICAgICAgJ2V2ZW50LmV4cG9ydCc6IGhhbmRsZUV4cG9ydEV2ZW50XG4gICAgfSlcbiAgfVxufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZYRVRhYmxlKSB7XG4gIHdpbmRvdy5WWEVUYWJsZS51c2UoVlhFVGFibGVQbHVnaW5FeHBvcnRYTFNYKVxufVxuXG5leHBvcnQgZGVmYXVsdCBWWEVUYWJsZVBsdWdpbkV4cG9ydFhMU1hcbiIsImltcG9ydCBYRVV0aWxzIGZyb20gJ3hlLXV0aWxzJztcbmltcG9ydCBFeGNlbEpTIGZyb20gJ2V4Y2VsanMnO1xubGV0IHZ4ZXRhYmxlO1xuY29uc3QgZGVmYXVsdEhlYWRlckJhY2tncm91bmRDb2xvciA9ICdmOGY4ZjknO1xuY29uc3QgZGVmYXVsdENlbGxGb250Q29sb3IgPSAnNjA2MjY2JztcbmNvbnN0IGRlZmF1bHRDZWxsQm9yZGVyU3R5bGUgPSAndGhpbic7XG5jb25zdCBkZWZhdWx0Q2VsbEJvcmRlckNvbG9yID0gJ2U4ZWFlYyc7XG5mdW5jdGlvbiBnZXRDZWxsTGFiZWwoY29sdW1uLCBjZWxsVmFsdWUpIHtcbiAgICBpZiAoY2VsbFZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAoY29sdW1uLmNlbGxUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgIHJldHVybiBYRVV0aWxzLnRvVmFsdWVTdHJpbmcoY2VsbFZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihjZWxsVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIoY2VsbFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChjZWxsVmFsdWUubGVuZ3RoIDwgMTIgJiYgIWlzTmFOKGNlbGxWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcihjZWxsVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2VsbFZhbHVlO1xufVxuZnVuY3Rpb24gZ2V0Rm9vdGVyRGF0YShvcHRzLCBmb290ZXJEYXRhKSB7XG4gICAgY29uc3QgeyBmb290ZXJGaWx0ZXJNZXRob2QgfSA9IG9wdHM7XG4gICAgcmV0dXJuIGZvb3RlckZpbHRlck1ldGhvZCA/IGZvb3RlckRhdGEuZmlsdGVyKChpdGVtcywgaW5kZXgpID0+IGZvb3RlckZpbHRlck1ldGhvZCh7IGl0ZW1zLCAkcm93SW5kZXg6IGluZGV4IH0pKSA6IGZvb3RlckRhdGE7XG59XG5mdW5jdGlvbiBnZXRGb290ZXJDZWxsVmFsdWUoJHRhYmxlLCBvcHRzLCByb3dzLCBjb2x1bW4pIHtcbiAgICBjb25zdCBjZWxsVmFsdWUgPSBnZXRDZWxsTGFiZWwoY29sdW1uLCByb3dzWyR0YWJsZS5nZXRWTUNvbHVtbkluZGV4KGNvbHVtbildKTtcbiAgICByZXR1cm4gY2VsbFZhbHVlO1xufVxuZnVuY3Rpb24gZ2V0VmFsaWRDb2x1bW4oY29sdW1uKSB7XG4gICAgY29uc3QgeyBjaGlsZE5vZGVzIH0gPSBjb2x1bW47XG4gICAgY29uc3QgaXNDb2xHcm91cCA9IGNoaWxkTm9kZXMgJiYgY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgaWYgKGlzQ29sR3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGdldFZhbGlkQ29sdW1uKGNoaWxkTm9kZXNbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29sdW1uO1xufVxuZnVuY3Rpb24gc2V0RXhjZWxSb3dIZWlnaHQoZXhjZWxSb3csIGhlaWdodCkge1xuICAgIGlmIChoZWlnaHQpIHtcbiAgICAgICAgZXhjZWxSb3cuaGVpZ2h0ID0gWEVVdGlscy5mbG9vcihoZWlnaHQgKiAwLjc1LCAxMik7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0RXhjZWxDZWxsU3R5bGUoZXhjZWxDZWxsLCBhbGlnbikge1xuICAgIGV4Y2VsQ2VsbC5wcm90ZWN0aW9uID0ge1xuICAgICAgICBsb2NrZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBleGNlbENlbGwuYWxpZ25tZW50ID0ge1xuICAgICAgICB2ZXJ0aWNhbDogJ21pZGRsZScsXG4gICAgICAgIGhvcml6b250YWw6IGFsaWduIHx8ICdsZWZ0J1xuICAgIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0Qm9yZGVyU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB7XG4gICAgICAgICAgICBzdHlsZTogZGVmYXVsdENlbGxCb3JkZXJTdHlsZSxcbiAgICAgICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdENlbGxCb3JkZXJDb2xvclxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZWZ0OiB7XG4gICAgICAgICAgICBzdHlsZTogZGVmYXVsdENlbGxCb3JkZXJTdHlsZSxcbiAgICAgICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdENlbGxCb3JkZXJDb2xvclxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBib3R0b206IHtcbiAgICAgICAgICAgIHN0eWxlOiBkZWZhdWx0Q2VsbEJvcmRlclN0eWxlLFxuICAgICAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEJvcmRlckNvbG9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJpZ2h0OiB7XG4gICAgICAgICAgICBzdHlsZTogZGVmYXVsdENlbGxCb3JkZXJTdHlsZSxcbiAgICAgICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdENlbGxCb3JkZXJDb2xvclxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGV4cG9ydFhMU1gocGFyYW1zKSB7XG4gICAgY29uc3QgbXNnS2V5ID0gJ3hsc3gnO1xuICAgIGNvbnN0IHsgJHRhYmxlLCBvcHRpb25zLCBjb2x1bW5zLCBjb2xncm91cHMsIGRhdGFzIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgeyBwcm9wcywgcmVhY3REYXRhIH0gPSAkdGFibGU7XG4gICAgY29uc3QgeyBoZWFkZXJBbGlnbjogYWxsSGVhZGVyQWxpZ24sIGFsaWduOiBhbGxBbGlnbiwgZm9vdGVyQWxpZ246IGFsbEZvb3RlckFsaWduIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IHJvd0hlaWdodCB9ID0gcmVhY3REYXRhO1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgc2hlZXROYW1lLCBpc0hlYWRlciwgaXNGb290ZXIsIGlzTWVyZ2UsIGlzQ29sZ3JvdXAsIG9yaWdpbmFsLCB1c2VTdHlsZSwgc2hlZXRNZXRob2QgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgc2hvd01zZyA9IG1lc3NhZ2UgIT09IGZhbHNlO1xuICAgIGNvbnN0IG1lcmdlQ2VsbHMgPSAkdGFibGUuZ2V0TWVyZ2VDZWxscygpO1xuICAgIGNvbnN0IGNvbExpc3QgPSBbXTtcbiAgICBjb25zdCBmb290TGlzdCA9IFtdO1xuICAgIGNvbnN0IHNoZWV0Q29scyA9IFtdO1xuICAgIGNvbnN0IHNoZWV0TWVyZ2VzID0gW107XG4gICAgbGV0IGJlZm9yZVJvd0NvdW50ID0gMDtcbiAgICBjb25zdCBjb2xIZWFkID0ge307XG4gICAgY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgY29uc3QgeyBpZCwgcHJvcGVydHksIHJlbmRlcldpZHRoIH0gPSBjb2x1bW47XG4gICAgICAgIGNvbEhlYWRbaWRdID0gb3JpZ2luYWwgPyBwcm9wZXJ0eSA6IGNvbHVtbi5nZXRUaXRsZSgpO1xuICAgICAgICBzaGVldENvbHMucHVzaCh7XG4gICAgICAgICAgICBrZXk6IGlkLFxuICAgICAgICAgICAgd2lkdGg6IFhFVXRpbHMuY2VpbChyZW5kZXJXaWR0aCAvIDgsIDEpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIC8vIOWkhOeQhuihqOWktFxuICAgIGlmIChpc0hlYWRlcikge1xuICAgICAgICAvLyDlpITnkIbliIbnu4RcbiAgICAgICAgaWYgKGlzQ29sZ3JvdXAgJiYgIW9yaWdpbmFsICYmIGNvbGdyb3Vwcykge1xuICAgICAgICAgICAgY29sZ3JvdXBzLmZvckVhY2goKGNvbHMsIHJJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwSGVhZCA9IHt9O1xuICAgICAgICAgICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwSGVhZFtjb2x1bW4uaWRdID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb2xzLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IF9jb2xTcGFuLCBfcm93U3BhbiB9ID0gY29sdW1uO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZENvbHVtbiA9IGdldFZhbGlkQ29sdW1uKGNvbHVtbik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbkluZGV4ID0gY29sdW1ucy5pbmRleE9mKHZhbGlkQ29sdW1uKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBIZWFkW3ZhbGlkQ29sdW1uLmlkXSA9IG9yaWdpbmFsID8gdmFsaWRDb2x1bW4ucHJvcGVydHkgOiBjb2x1bW4uZ2V0VGl0bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9jb2xTcGFuID4gMSB8fCBfcm93U3BhbiA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoZWV0TWVyZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM6IHsgcjogckluZGV4LCBjOiBjb2x1bW5JbmRleCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGU6IHsgcjogckluZGV4ICsgX3Jvd1NwYW4gLSAxLCBjOiBjb2x1bW5JbmRleCArIF9jb2xTcGFuIC0gMSB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbExpc3QucHVzaChncm91cEhlYWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb2xMaXN0LnB1c2goY29sSGVhZCk7XG4gICAgICAgIH1cbiAgICAgICAgYmVmb3JlUm93Q291bnQgKz0gY29sTGlzdC5sZW5ndGg7XG4gICAgfVxuICAgIC8vIOWkhOeQhuWQiOW5tlxuICAgIGlmIChpc01lcmdlICYmICFvcmlnaW5hbCkge1xuICAgICAgICBtZXJnZUNlbGxzLmZvckVhY2gobWVyZ2VJdGVtID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcm93OiBtZXJnZVJvd0luZGV4LCByb3dzcGFuOiBtZXJnZVJvd3NwYW4sIGNvbDogbWVyZ2VDb2xJbmRleCwgY29sc3BhbjogbWVyZ2VDb2xzcGFuIH0gPSBtZXJnZUl0ZW07XG4gICAgICAgICAgICBzaGVldE1lcmdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzOiB7IHI6IG1lcmdlUm93SW5kZXggKyBiZWZvcmVSb3dDb3VudCwgYzogbWVyZ2VDb2xJbmRleCB9LFxuICAgICAgICAgICAgICAgIGU6IHsgcjogbWVyZ2VSb3dJbmRleCArIGJlZm9yZVJvd0NvdW50ICsgbWVyZ2VSb3dzcGFuIC0gMSwgYzogbWVyZ2VDb2xJbmRleCArIG1lcmdlQ29sc3BhbiAtIDEgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCByb3dMaXN0ID0gZGF0YXMubWFwKGl0ZW0gPT4ge1xuICAgICAgICBjb25zdCByZXN0ID0ge307XG4gICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICAgICAgICByZXN0W2NvbHVtbi5pZF0gPSBnZXRDZWxsTGFiZWwoY29sdW1uLCBpdGVtW2NvbHVtbi5pZF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3Q7XG4gICAgfSk7XG4gICAgYmVmb3JlUm93Q291bnQgKz0gcm93TGlzdC5sZW5ndGg7XG4gICAgLy8g5aSE55CG6KGo5bC+XG4gICAgaWYgKGlzRm9vdGVyKSB7XG4gICAgICAgIGNvbnN0IHsgZm9vdGVyRGF0YSB9ID0gJHRhYmxlLmdldFRhYmxlRGF0YSgpO1xuICAgICAgICBjb25zdCBmb290ZXJzID0gZ2V0Rm9vdGVyRGF0YShvcHRpb25zLCBmb290ZXJEYXRhKTtcbiAgICAgICAgY29uc3QgbWVyZ2VGb290ZXJJdGVtcyA9ICR0YWJsZS5nZXRNZXJnZUZvb3Rlckl0ZW1zKCk7XG4gICAgICAgIC8vIOWkhOeQhuWQiOW5tlxuICAgICAgICBpZiAoaXNNZXJnZSAmJiAhb3JpZ2luYWwpIHtcbiAgICAgICAgICAgIG1lcmdlRm9vdGVySXRlbXMuZm9yRWFjaChtZXJnZUl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgcm93OiBtZXJnZVJvd0luZGV4LCByb3dzcGFuOiBtZXJnZVJvd3NwYW4sIGNvbDogbWVyZ2VDb2xJbmRleCwgY29sc3BhbjogbWVyZ2VDb2xzcGFuIH0gPSBtZXJnZUl0ZW07XG4gICAgICAgICAgICAgICAgc2hlZXRNZXJnZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHM6IHsgcjogbWVyZ2VSb3dJbmRleCArIGJlZm9yZVJvd0NvdW50LCBjOiBtZXJnZUNvbEluZGV4IH0sXG4gICAgICAgICAgICAgICAgICAgIGU6IHsgcjogbWVyZ2VSb3dJbmRleCArIGJlZm9yZVJvd0NvdW50ICsgbWVyZ2VSb3dzcGFuIC0gMSwgYzogbWVyZ2VDb2xJbmRleCArIG1lcmdlQ29sc3BhbiAtIDEgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVycy5mb3JFYWNoKChyb3dzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0ge307XG4gICAgICAgICAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW1bY29sdW1uLmlkXSA9IGdldEZvb3RlckNlbGxWYWx1ZSgkdGFibGUsIG9wdGlvbnMsIHJvd3MsIGNvbHVtbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvb3RMaXN0LnB1c2goaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBleHBvcnRNZXRob2QgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHdvcmtib29rID0gbmV3IEV4Y2VsSlMuV29ya2Jvb2soKTtcbiAgICAgICAgY29uc3Qgc2hlZXQgPSB3b3JrYm9vay5hZGRXb3Jrc2hlZXQoc2hlZXROYW1lKTtcbiAgICAgICAgd29ya2Jvb2suY3JlYXRvciA9ICd2eGUtdGFibGUnO1xuICAgICAgICBzaGVldC5jb2x1bW5zID0gc2hlZXRDb2xzO1xuICAgICAgICBpZiAoaXNIZWFkZXIpIHtcbiAgICAgICAgICAgIHNoZWV0LmFkZFJvd3MoY29sTGlzdCkuZm9yRWFjaChleGNlbFJvdyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZVN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEV4Y2VsUm93SGVpZ2h0KGV4Y2VsUm93LCByb3dIZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBleGNlbFJvdy5lYWNoQ2VsbChleGNlbENlbGwgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGNlbENvbCA9IHNoZWV0LmdldENvbHVtbihleGNlbENlbGwuY29sKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sdW1uID0gJHRhYmxlLmdldENvbHVtbkJ5SWQoZXhjZWxDb2wua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBoZWFkZXJBbGlnbiwgYWxpZ24gfSA9IGNvbHVtbjtcbiAgICAgICAgICAgICAgICAgICAgc2V0RXhjZWxDZWxsU3R5bGUoZXhjZWxDZWxsLCBoZWFkZXJBbGlnbiB8fCBhbGlnbiB8fCBhbGxIZWFkZXJBbGlnbiB8fCBhbGxBbGlnbik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihleGNlbENlbGwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbGQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdwYXR0ZXJuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmdDb2xvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdEhlYWRlckJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IGdldERlZmF1bHRCb3JkZXJTdHlsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc2hlZXQuYWRkUm93cyhyb3dMaXN0KS5mb3JFYWNoKGV4Y2VsUm93ID0+IHtcbiAgICAgICAgICAgIGlmICh1c2VTdHlsZSkge1xuICAgICAgICAgICAgICAgIHNldEV4Y2VsUm93SGVpZ2h0KGV4Y2VsUm93LCByb3dIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhjZWxSb3cuZWFjaENlbGwoZXhjZWxDZWxsID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGNlbENvbCA9IHNoZWV0LmdldENvbHVtbihleGNlbENlbGwuY29sKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2x1bW4gPSAkdGFibGUuZ2V0Q29sdW1uQnlJZChleGNlbENvbC5rZXkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgYWxpZ24gfSA9IGNvbHVtbjtcbiAgICAgICAgICAgICAgICBzZXRFeGNlbENlbGxTdHlsZShleGNlbENlbGwsIGFsaWduIHx8IGFsbEFsaWduKTtcbiAgICAgICAgICAgICAgICBpZiAodXNlU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihleGNlbENlbGwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IGdldERlZmF1bHRCb3JkZXJTdHlsZSgpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGlzRm9vdGVyKSB7XG4gICAgICAgICAgICBzaGVldC5hZGRSb3dzKGZvb3RMaXN0KS5mb3JFYWNoKGV4Y2VsUm93ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodXNlU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RXhjZWxSb3dIZWlnaHQoZXhjZWxSb3csIHJvd0hlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV4Y2VsUm93LmVhY2hDZWxsKGV4Y2VsQ2VsbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4Y2VsQ29sID0gc2hlZXQuZ2V0Q29sdW1uKGV4Y2VsQ2VsbC5jb2wpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2x1bW4gPSAkdGFibGUuZ2V0Q29sdW1uQnlJZChleGNlbENvbC5rZXkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGZvb3RlckFsaWduLCBhbGlnbiB9ID0gY29sdW1uO1xuICAgICAgICAgICAgICAgICAgICBzZXRFeGNlbENlbGxTdHlsZShleGNlbENlbGwsIGZvb3RlckFsaWduIHx8IGFsaWduIHx8IGFsbEZvb3RlckFsaWduIHx8IGFsbEFsaWduKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZVN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGV4Y2VsQ2VsbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ2I6IGRlZmF1bHRDZWxsRm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogZ2V0RGVmYXVsdEJvcmRlclN0eWxlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlU3R5bGUgJiYgc2hlZXRNZXRob2QpIHtcbiAgICAgICAgICAgIHNoZWV0TWV0aG9kKHsgb3B0aW9uczogb3B0aW9ucywgd29ya2Jvb2ssIHdvcmtzaGVldDogc2hlZXQsIGNvbHVtbnMsIGNvbGdyb3VwcywgZGF0YXMsICR0YWJsZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBzaGVldE1lcmdlcy5mb3JFYWNoKCh7IHMsIGUgfSkgPT4ge1xuICAgICAgICAgICAgc2hlZXQubWVyZ2VDZWxscyhzLnIgKyAxLCBzLmMgKyAxLCBlLnIgKyAxLCBlLmMgKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdvcmtib29rLnhsc3gud3JpdGVCdWZmZXIoKS50aGVuKGJ1ZmZlciA9PiB7XG4gICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0pO1xuICAgICAgICAgICAgLy8g5a+85Ye6IHhsc3hcbiAgICAgICAgICAgIGRvd25sb2FkRmlsZShwYXJhbXMsIGJsb2IsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHNob3dNc2cpIHtcbiAgICAgICAgICAgICAgICB2eGV0YWJsZS5tb2RhbC5jbG9zZShtc2dLZXkpO1xuICAgICAgICAgICAgICAgIHZ4ZXRhYmxlLm1vZGFsLm1lc3NhZ2UoeyBtZXNzYWdlOiB2eGV0YWJsZS50KCd2eGUudGFibGUuZXhwU3VjY2VzcycpLCBzdGF0dXM6ICdzdWNjZXNzJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoc2hvd01zZykge1xuICAgICAgICB2eGV0YWJsZS5tb2RhbC5tZXNzYWdlKHsgaWQ6IG1zZ0tleSwgbWVzc2FnZTogdnhldGFibGUudCgndnhlLnRhYmxlLmV4cExvYWRpbmcnKSwgc3RhdHVzOiAnbG9hZGluZycsIGR1cmF0aW9uOiAtMSB9KTtcbiAgICAgICAgc2V0VGltZW91dChleHBvcnRNZXRob2QsIDE1MDApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhwb3J0TWV0aG9kKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZG93bmxvYWRGaWxlKHBhcmFtcywgYmxvYiwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgZmlsZW5hbWUsIHR5cGUgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgc2hvd01zZyA9IG1lc3NhZ2UgIT09IGZhbHNlO1xuICAgIGlmICh3aW5kb3cuQmxvYikge1xuICAgICAgICBjb25zdCBsaW5rRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgbGlua0VsZW0udGFyZ2V0ID0gJ19ibGFuayc7XG4gICAgICAgIGxpbmtFbGVtLmRvd25sb2FkID0gYCR7ZmlsZW5hbWV9LiR7dHlwZX1gO1xuICAgICAgICBsaW5rRWxlbS5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rRWxlbSk7XG4gICAgICAgIGxpbmtFbGVtLmNsaWNrKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGlua0VsZW0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHNob3dNc2cpIHtcbiAgICAgICAgICAgIHZ4ZXRhYmxlLm1vZGFsLmFsZXJ0KHsgbWVzc2FnZTogdnhldGFibGUudCgndnhlLmVycm9yLm5vdEV4cCcpLCBzdGF0dXM6ICdlcnJvcicgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja0ltcG9ydERhdGEodGFibGVGaWVsZHMsIGZpZWxkcykge1xuICAgIHJldHVybiBmaWVsZHMuc29tZShmaWVsZCA9PiB0YWJsZUZpZWxkcy5pbmRleE9mKGZpZWxkKSA+IC0xKTtcbn1cbmZ1bmN0aW9uIGltcG9ydEVycm9yKHBhcmFtcykge1xuICAgIGNvbnN0IHsgJHRhYmxlLCBvcHRpb25zIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgeyBpbnRlcm5hbERhdGEgfSA9ICR0YWJsZTtcbiAgICBjb25zdCB7IF9pbXBvcnRSZWplY3QgfSA9IGludGVybmFsRGF0YTtcbiAgICBjb25zdCBzaG93TXNnID0gb3B0aW9ucy5tZXNzYWdlICE9PSBmYWxzZTtcbiAgICBpZiAoc2hvd01zZykge1xuICAgICAgICB2eGV0YWJsZS5tb2RhbC5tZXNzYWdlKHsgbWVzc2FnZTogdnhldGFibGUudCgndnhlLmVycm9yLmltcEZpZWxkcycpLCBzdGF0dXM6ICdlcnJvcicgfSk7XG4gICAgfVxuICAgIGlmIChfaW1wb3J0UmVqZWN0KSB7XG4gICAgICAgIF9pbXBvcnRSZWplY3QoeyBzdGF0dXM6IGZhbHNlIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGltcG9ydFhMU1gocGFyYW1zKSB7XG4gICAgY29uc3QgeyAkdGFibGUsIGNvbHVtbnMsIG9wdGlvbnMsIGZpbGUgfSA9IHBhcmFtcztcbiAgICBjb25zdCB7IGludGVybmFsRGF0YSB9ID0gJHRhYmxlO1xuICAgIGNvbnN0IHsgX2ltcG9ydFJlc29sdmUgfSA9IGludGVybmFsRGF0YTtcbiAgICBjb25zdCBzaG93TXNnID0gb3B0aW9ucy5tZXNzYWdlICE9PSBmYWxzZTtcbiAgICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmaWxlUmVhZGVyLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIGltcG9ydEVycm9yKHBhcmFtcyk7XG4gICAgfTtcbiAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IChldm50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYmxlRmllbGRzID0gW107XG4gICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGNvbHVtbi5wcm9wZXJ0eTtcbiAgICAgICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgICAgIHRhYmxlRmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgd29ya2Jvb2sgPSBuZXcgRXhjZWxKUy5Xb3JrYm9vaygpO1xuICAgICAgICBjb25zdCByZWFkZXJUYXJnZXQgPSBldm50LnRhcmdldDtcbiAgICAgICAgaWYgKHJlYWRlclRhcmdldCkge1xuICAgICAgICAgICAgd29ya2Jvb2sueGxzeC5sb2FkKHJlYWRlclRhcmdldC5yZXN1bHQpLnRoZW4od2IgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0U2hlZXQgPSB3Yi53b3Jrc2hlZXRzWzBdO1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdFNoZWV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoZWV0VmFsdWVzID0gZmlyc3RTaGVldC5nZXRTaGVldFZhbHVlcygpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZEluZGV4ID0gWEVVdGlscy5maW5kSW5kZXhPZihzaGVldFZhbHVlcywgKGxpc3QpID0+IGxpc3QgJiYgbGlzdC5sZW5ndGggPiAwKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRzID0gc2hlZXRWYWx1ZXNbZmllbGRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGNoZWNrSW1wb3J0RGF0YSh0YWJsZUZpZWxkcywgZmllbGRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjb3JkcyA9IHNoZWV0VmFsdWVzLnNsaWNlKGZpZWxkSW5kZXgpLm1hcChsaXN0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5mb3JFYWNoKChjZWxsVmFsdWUsIGNJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtW2ZpZWxkc1tjSW5kZXhdXSA9IGNlbGxWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWNvcmQgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkW2ZpZWxkXSA9IFhFVXRpbHMuaXNVbmRlZmluZWQoaXRlbVtmaWVsZF0pID8gbnVsbCA6IGl0ZW1bZmllbGRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0YWJsZS5jcmVhdGVEYXRhKHJlY29yZHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9hZFJlc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubW9kZSA9PT0gJ2luc2VydCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFJlc3QgPSAkdGFibGUuaW5zZXJ0QXQoZGF0YSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFJlc3QgPSAkdGFibGUucmVsb2FkRGF0YShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRSZXN0LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2ltcG9ydFJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbXBvcnRSZXNvbHZlKHsgc3RhdHVzOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG93TXNnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdnhldGFibGUubW9kYWwubWVzc2FnZSh7IG1lc3NhZ2U6IHZ4ZXRhYmxlLnQoJ3Z4ZS50YWJsZS5pbXBTdWNjZXNzJywgW3JlY29yZHMubGVuZ3RoXSksIHN0YXR1czogJ3N1Y2Nlc3MnIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0RXJyb3IocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0RXJyb3IocGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGltcG9ydEVycm9yKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG59XG5mdW5jdGlvbiBoYW5kbGVJbXBvcnRFdmVudChwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zLm9wdGlvbnMudHlwZSA9PT0gJ3hsc3gnKSB7XG4gICAgICAgIGltcG9ydFhMU1gocGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUV4cG9ydEV2ZW50KHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMub3B0aW9ucy50eXBlID09PSAneGxzeCcpIHtcbiAgICAgICAgZXhwb3J0WExTWChwYXJhbXMpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiDln7rkuo4gdnhlLXRhYmxlIOihqOagvOeahOWinuW8uuaPkuS7tu+8jOaUr+aMgeWvvOWHuiB4bHN4IOagvOW8j1xuICovXG5leHBvcnQgY29uc3QgVlhFVGFibGVQbHVnaW5FeHBvcnRYTFNYID0ge1xuICAgIGluc3RhbGwodnhldGFibGVjb3JlKSB7XG4gICAgICAgIGNvbnN0IHsgc2V0dXAsIGludGVyY2VwdG9yIH0gPSB2eGV0YWJsZWNvcmU7XG4gICAgICAgIHZ4ZXRhYmxlID0gdnhldGFibGVjb3JlO1xuICAgICAgICBzZXR1cCh7XG4gICAgICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlczoge1xuICAgICAgICAgICAgICAgICAgICB4bHN4OiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaW50ZXJjZXB0b3IubWl4aW4oe1xuICAgICAgICAgICAgJ2V2ZW50LmltcG9ydCc6IGhhbmRsZUltcG9ydEV2ZW50LFxuICAgICAgICAgICAgJ2V2ZW50LmV4cG9ydCc6IGhhbmRsZUV4cG9ydEV2ZW50XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZYRVRhYmxlKSB7XG4gICAgd2luZG93LlZYRVRhYmxlLnVzZShWWEVUYWJsZVBsdWdpbkV4cG9ydFhMU1gpO1xufVxuZXhwb3J0IGRlZmF1bHQgVlhFVGFibGVQbHVnaW5FeHBvcnRYTFNYO1xuIl19
