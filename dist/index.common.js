"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VXETablePluginExportXLSX = void 0;

var _xeUtils = _interopRequireDefault(require("xe-utils/methods/xe-utils"));

var _xlsx = _interopRequireDefault(require("xlsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getFooterCellValue($table, opts, rows, column) {
  var cellValue = _xeUtils["default"].toString(rows[$table.$getColumnIndex(column)]);

  return cellValue;
}

function toBuffer(wbout) {
  var buf = new ArrayBuffer(wbout.length);
  var view = new Uint8Array(buf);

  for (var index = 0; index !== wbout.length; ++index) {
    view[index] = wbout.charCodeAt(index) & 0xFF;
  }

  return buf;
}

function exportXLSX(params) {
  var $table = params.$table,
      options = params.options,
      columns = params.columns,
      datas = params.datas;
  var sheetName = options.sheetName,
      type = options.type,
      isHeader = options.isHeader,
      isFooter = options.isFooter,
      original = options.original,
      message = options.message,
      footerFilterMethod = options.footerFilterMethod;
  var colHead = {};
  var footList = [];
  var rowList = datas;

  if (isHeader) {
    columns.forEach(function (column) {
      colHead[column.id] = _xeUtils["default"].toString(original ? column.property : column.getTitle());
    });
  }

  if (isFooter) {
    var footerData = $table.footerData;
    var footers = footerFilterMethod ? footerData.filter(footerFilterMethod) : footerData;
    footers.forEach(function (rows) {
      var item = {};
      columns.forEach(function (column) {
        item[column.id] = getFooterCellValue($table, options, rows, column);
      });
      footList.push(item);
    });
  }

  var book = _xlsx["default"].utils.book_new();

  var sheet = _xlsx["default"].utils.json_to_sheet((isHeader ? [colHead] : []).concat(rowList).concat(footList), {
    skipHeader: true
  }); // 转换数据


  _xlsx["default"].utils.book_append_sheet(book, sheet, sheetName);

  var wbout = _xlsx["default"].write(book, {
    bookType: type,
    bookSST: false,
    type: 'binary'
  });

  var blob = new Blob([toBuffer(wbout)], {
    type: 'application/octet-stream'
  }); // 保存导出

  downloadFile(blob, options);

  if (message !== false) {
    $table.$XModal.message({
      message: i18n('vxe.table.expSuccess'),
      status: 'success'
    });
  }
}

function downloadFile(blob, options) {
  if (window.Blob) {
    var filename = options.filename,
        type = options.type;

    if (navigator.msSaveBlob) {
      navigator.msSaveBlob(blob, "".concat(filename, ".").concat(type));
    } else {
      var linkElem = document.createElement('a');
      linkElem.target = '_blank';
      linkElem.download = "".concat(filename, ".").concat(type);
      linkElem.href = URL.createObjectURL(blob);
      document.body.appendChild(linkElem);
      linkElem.click();
      document.body.removeChild(linkElem);
    }
  } else {
    console.error(i18n('vxe.error.notExp'));
  }
}

function replaceDoubleQuotation(val) {
  return val.replace(/^"/, '').replace(/"$/, '');
}

function parseCsv(columns, content) {
  var list = content.split('\n');
  var fields = [];
  var rows = [];

  if (list.length) {
    var rList = list.slice(1);
    list[0].split(',').map(replaceDoubleQuotation);
    rList.forEach(function (r) {
      if (r) {
        var item = {};
        r.split(',').forEach(function (val, colIndex) {
          if (fields[colIndex]) {
            item[fields[colIndex]] = replaceDoubleQuotation(val);
          }
        });
        rows.push(item);
      }
    });
  }

  return {
    fields: fields,
    rows: rows
  };
}

function checkImportData(columns, fields, rows) {
  var tableFields = [];
  columns.forEach(function (column) {
    var field = column.property;

    if (field) {
      tableFields.push(field);
    }
  });
  return tableFields.every(function (field) {
    return fields.includes(field);
  });
}

function importXLSX(params) {
  var $table = params.$table,
      columns = params.columns,
      options = params.options,
      file = params.file;
  var _importCallback = $table._importCallback,
      _importResolve = $table._importResolve;
  var fileReader = new FileReader();

  fileReader.onload = function (e) {
    var workbook = _xlsx["default"].read(e.target.result, {
      type: 'binary'
    });

    var csvData = _xlsx["default"].utils.sheet_to_csv(workbook.Sheets.Sheet1);

    var rest = parseCsv(columns, csvData);
    var fields = rest.fields,
        rows = rest.rows;
    var status = checkImportData(columns, fields, rows);

    if (status) {
      $table.createData(rows).then(function (data) {
        if (options.mode === 'append') {
          $table.insertAt(data, -1);
        } else {
          $table.reloadData(data);
        }
      });

      if (options.message !== false) {
        $table.$XModal.message({
          message: _xeUtils["default"].template(i18n('vxe.table.impSuccess'), [rows.length]),
          status: 'success'
        });
      }
    } else if (options.message !== false) {
      $table.$XModal.message({
        message: i18n('vxe.error.impFields'),
        status: 'error'
      });
    }

    if (_importResolve) {
      _importResolve(status);

      $table._importResolve = null;
    } else if (_importCallback) {
      // 已废弃
      _importCallback(status);

      $table._importCallback = null;
    }
  };

  fileReader.readAsBinaryString(file);
}

function handleImportEvent(params) {
  if (params.options.type === 'xlsx') {
    importXLSX(params);
    return false;
  }
}

function handleExportEvent(params) {
  if (params.options.type === 'xlsx') {
    exportXLSX(params);
    return false;
  }
}
/**
 * 基于 vxe-table 表格的增强插件，支持导出 xlsx 格式
 */


var VXETablePluginExportXLSX = {
  install: function install(xtable) {
    Object.assign(xtable.types, {
      xlsx: 1
    });
    xtable.interceptor.mixin({
      'event.import': handleImportEvent,
      'event.export': handleExportEvent
    });
    VXETablePluginExportXLSX.t = xtable.t;
  }
};
exports.VXETablePluginExportXLSX = VXETablePluginExportXLSX;

function i18n(key) {
  if (VXETablePluginExportXLSX.t) {
    return VXETablePluginExportXLSX.t(key);
  }
}

if (typeof window !== 'undefined' && window.VXETable) {
  window.VXETable.use(VXETablePluginExportXLSX);
}

var _default = VXETablePluginExportXLSX;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbImdldEZvb3RlckNlbGxWYWx1ZSIsIiR0YWJsZSIsIm9wdHMiLCJyb3dzIiwiY29sdW1uIiwiY2VsbFZhbHVlIiwiWEVVdGlscyIsInRvU3RyaW5nIiwiJGdldENvbHVtbkluZGV4IiwidG9CdWZmZXIiLCJ3Ym91dCIsImJ1ZiIsIkFycmF5QnVmZmVyIiwibGVuZ3RoIiwidmlldyIsIlVpbnQ4QXJyYXkiLCJpbmRleCIsImNoYXJDb2RlQXQiLCJleHBvcnRYTFNYIiwicGFyYW1zIiwib3B0aW9ucyIsImNvbHVtbnMiLCJkYXRhcyIsInNoZWV0TmFtZSIsInR5cGUiLCJpc0hlYWRlciIsImlzRm9vdGVyIiwib3JpZ2luYWwiLCJtZXNzYWdlIiwiZm9vdGVyRmlsdGVyTWV0aG9kIiwiY29sSGVhZCIsImZvb3RMaXN0Iiwicm93TGlzdCIsImZvckVhY2giLCJpZCIsInByb3BlcnR5IiwiZ2V0VGl0bGUiLCJmb290ZXJEYXRhIiwiZm9vdGVycyIsImZpbHRlciIsIml0ZW0iLCJwdXNoIiwiYm9vayIsIlhMU1giLCJ1dGlscyIsImJvb2tfbmV3Iiwic2hlZXQiLCJqc29uX3RvX3NoZWV0IiwiY29uY2F0Iiwic2tpcEhlYWRlciIsImJvb2tfYXBwZW5kX3NoZWV0Iiwid3JpdGUiLCJib29rVHlwZSIsImJvb2tTU1QiLCJibG9iIiwiQmxvYiIsImRvd25sb2FkRmlsZSIsIiRYTW9kYWwiLCJpMThuIiwic3RhdHVzIiwid2luZG93IiwiZmlsZW5hbWUiLCJuYXZpZ2F0b3IiLCJtc1NhdmVCbG9iIiwibGlua0VsZW0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0YXJnZXQiLCJkb3dubG9hZCIsImhyZWYiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjbGljayIsInJlbW92ZUNoaWxkIiwiY29uc29sZSIsImVycm9yIiwicmVwbGFjZURvdWJsZVF1b3RhdGlvbiIsInZhbCIsInJlcGxhY2UiLCJwYXJzZUNzdiIsImNvbnRlbnQiLCJsaXN0Iiwic3BsaXQiLCJmaWVsZHMiLCJyTGlzdCIsInNsaWNlIiwibWFwIiwiciIsImNvbEluZGV4IiwiY2hlY2tJbXBvcnREYXRhIiwidGFibGVGaWVsZHMiLCJmaWVsZCIsImV2ZXJ5IiwiaW5jbHVkZXMiLCJpbXBvcnRYTFNYIiwiZmlsZSIsIl9pbXBvcnRDYWxsYmFjayIsIl9pbXBvcnRSZXNvbHZlIiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJlIiwid29ya2Jvb2siLCJyZWFkIiwicmVzdWx0IiwiY3N2RGF0YSIsInNoZWV0X3RvX2NzdiIsIlNoZWV0cyIsIlNoZWV0MSIsInJlc3QiLCJjcmVhdGVEYXRhIiwidGhlbiIsImRhdGEiLCJtb2RlIiwiaW5zZXJ0QXQiLCJyZWxvYWREYXRhIiwidGVtcGxhdGUiLCJyZWFkQXNCaW5hcnlTdHJpbmciLCJoYW5kbGVJbXBvcnRFdmVudCIsImhhbmRsZUV4cG9ydEV2ZW50IiwiVlhFVGFibGVQbHVnaW5FeHBvcnRYTFNYIiwiaW5zdGFsbCIsInh0YWJsZSIsIk9iamVjdCIsImFzc2lnbiIsInR5cGVzIiwieGxzeCIsImludGVyY2VwdG9yIiwibWl4aW4iLCJ0Iiwia2V5IiwiVlhFVGFibGUiLCJ1c2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7OztBQUVBLFNBQVNBLGtCQUFULENBQTZCQyxNQUE3QixFQUEwQ0MsSUFBMUMsRUFBcURDLElBQXJELEVBQWtFQyxNQUFsRSxFQUE2RTtBQUMzRSxNQUFJQyxTQUFTLEdBQUdDLG9CQUFRQyxRQUFSLENBQWlCSixJQUFJLENBQUNGLE1BQU0sQ0FBQ08sZUFBUCxDQUF1QkosTUFBdkIsQ0FBRCxDQUFyQixDQUFoQjs7QUFDQSxTQUFPQyxTQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksUUFBVCxDQUFtQkMsS0FBbkIsRUFBNkI7QUFDM0IsTUFBSUMsR0FBRyxHQUFHLElBQUlDLFdBQUosQ0FBZ0JGLEtBQUssQ0FBQ0csTUFBdEIsQ0FB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bEN3RSxJQUFBQSxVQUFVLENBQUM3RSxNQUFELENBQVY7QUFDQSxXQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVELFNBQVNzRyxpQkFBVCxDQUE0QnRHLE1BQTVCLEVBQXVDO0FBQ3JDLE1BQUlBLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlSSxJQUFmLEtBQXdCLE1BQTVCLEVBQW9DO0FBQ2xDTixJQUFBQSxVQUFVLENBQUNDLE1BQUQsQ0FBVjtBQUNBLFdBQU8sS0FBUDtBQUNEO0FBQ0Y7QUFFRDs7Ozs7QUFHTyxJQUFNdUcsd0JBQXdCLEdBQVE7QUFDM0NDLEVBQUFBLE9BRDJDLG1CQUNsQ0MsTUFEa0MsRUFDWDtBQUM5QkMsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNGLE1BQU0sQ0FBQ0csS0FBckIsRUFBNEI7QUFBRUMsTUFBQUEsSUFBSSxFQUFFO0FBQVIsS0FBNUI7QUFDQUosSUFBQUEsTUFBTSxDQUFDSyxXQUFQLENBQW1CQyxLQUFuQixDQUF5QjtBQUN2QixzQkFBZ0JWLGlCQURPO0FBRXZCLHNCQUFnQkM7QUFGTyxLQUF6QjtBQUlBQyxJQUFBQSx3QkFBd0IsQ0FBQ1MsQ0FBekIsR0FBNkJQLE1BQU0sQ0FBQ08sQ0FBcEM7QUFDRDtBQVIwQyxDQUF0Qzs7O0FBV1AsU0FBU3pFLElBQVQsQ0FBZTBFLEdBQWYsRUFBMEI7QUFDeEIsTUFBSVYsd0JBQXdCLENBQUNTLENBQTdCLEVBQWdDO0FBQzlCLFdBQU9ULHdCQUF3QixDQUFDUyxDQUF6QixDQUEyQkMsR0FBM0IsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsSUFBSSxPQUFPeEUsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsTUFBTSxDQUFDeUUsUUFBNUMsRUFBc0Q7QUFDcER6RSxFQUFBQSxNQUFNLENBQUN5RSxRQUFQLENBQWdCQyxHQUFoQixDQUFvQlosd0JBQXBCO0FBQ0Q7O2VBRWNBLHdCIiwiZmlsZSI6ImluZGV4LmNvbW1vbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYRVV0aWxzIGZyb20gJ3hlLXV0aWxzL21ldGhvZHMveGUtdXRpbHMnXHJcbmltcG9ydCBWWEVUYWJsZSBmcm9tICd2eGUtdGFibGUvbGliL3Z4ZS10YWJsZSdcclxuaW1wb3J0IFhMU1ggZnJvbSAneGxzeCdcclxuXHJcbmZ1bmN0aW9uIGdldEZvb3RlckNlbGxWYWx1ZSAoJHRhYmxlOiBhbnksIG9wdHM6IGFueSwgcm93czogYW55W10sIGNvbHVtbjogYW55KSB7XHJcbiAgdmFyIGNlbGxWYWx1ZSA9IFhFVXRpbHMudG9TdHJpbmcocm93c1skdGFibGUuJGdldENvbHVtbkluZGV4KGNvbHVtbildKVxyXG4gIHJldHVybiBjZWxsVmFsdWVcclxufVxyXG5cclxuZnVuY3Rpb24gdG9CdWZmZXIgKHdib3V0OiBhbnkpIHtcclxuICBsZXQgYnVmID0gbmV3IEFycmF5QnVmZmVyKHdib3V0Lmxlbmd0aClcclxuICBsZXQgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcclxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4ICE9PSB3Ym91dC5sZW5ndGg7ICsraW5kZXgpIHZpZXdbaW5kZXhdID0gd2JvdXQuY2hhckNvZGVBdChpbmRleCkgJiAweEZGXHJcbiAgcmV0dXJuIGJ1ZlxyXG59XHJcblxyXG5mdW5jdGlvbiBleHBvcnRYTFNYIChwYXJhbXM6IGFueSkge1xyXG4gIGNvbnN0IHsgJHRhYmxlLCBvcHRpb25zLCBjb2x1bW5zLCBkYXRhcyB9ID0gcGFyYW1zXHJcbiAgY29uc3QgeyBzaGVldE5hbWUsIHR5cGUsIGlzSGVhZGVyLCBpc0Zvb3Rlciwgb3JpZ2luYWwsIG1lc3NhZ2UsIGZvb3RlckZpbHRlck1ldGhvZCB9ID0gb3B0aW9uc1xyXG4gIGNvbnN0IGNvbEhlYWQ6IGFueSA9IHt9XHJcbiAgY29uc3QgZm9vdExpc3Q6IGFueVtdID0gW11cclxuICBjb25zdCByb3dMaXN0ID0gZGF0YXNcclxuICBpZiAoaXNIZWFkZXIpIHtcclxuICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uOiBhbnkpID0+IHtcclxuICAgICAgY29sSGVhZFtjb2x1bW4uaWRdID0gWEVVdGlscy50b1N0cmluZyhvcmlnaW5hbCA/IGNvbHVtbi5wcm9wZXJ0eSA6IGNvbHVtbi5nZXRUaXRsZSgpKVxyXG4gICAgfSlcclxuICB9XHJcbiAgaWYgKGlzRm9vdGVyKSB7XHJcbiAgICBjb25zdCBmb290ZXJEYXRhOiBhbnlbXSA9ICR0YWJsZS5mb290ZXJEYXRhXHJcbiAgICBjb25zdCBmb290ZXJzOiBhbnlbXSA9IGZvb3RlckZpbHRlck1ldGhvZCA/IGZvb3RlckRhdGEuZmlsdGVyKGZvb3RlckZpbHRlck1ldGhvZCkgOiBmb290ZXJEYXRhXHJcbiAgICBmb290ZXJzLmZvckVhY2goKHJvd3M6IGFueVtdKSA9PiB7XHJcbiAgICAgIGNvbnN0IGl0ZW06IGFueSA9IHt9XHJcbiAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uOiBhbnkpID0+IHtcclxuICAgICAgICBpdGVtW2NvbHVtbi5pZF0gPSBnZXRGb290ZXJDZWxsVmFsdWUoJHRhYmxlLCBvcHRpb25zLCByb3dzLCBjb2x1bW4pXHJcbiAgICAgIH0pXHJcbiAgICAgIGZvb3RMaXN0LnB1c2goaXRlbSlcclxuICAgIH0pXHJcbiAgfVxyXG4gIGNvbnN0IGJvb2sgPSBYTFNYLnV0aWxzLmJvb2tfbmV3KClcclxuICBjb25zdCBzaGVldCA9IFhMU1gudXRpbHMuanNvbl90b19zaGVldCgoaXNIZWFkZXIgPyBbY29sSGVhZF0gOiBbXSkuY29uY2F0KHJvd0xpc3QpLmNvbmNhdChmb290TGlzdCksIHsgc2tpcEhlYWRlcjogdHJ1ZSB9KVxyXG4gIC8vIOi9rOaNouaVsOaNrlxyXG4gIFhMU1gudXRpbHMuYm9va19hcHBlbmRfc2hlZXQoYm9vaywgc2hlZXQsIHNoZWV0TmFtZSlcclxuICBjb25zdCB3Ym91dCA9IFhMU1gud3JpdGUoYm9vaywgeyBib29rVHlwZTogdHlwZSwgYm9va1NTVDogZmFsc2UsIHR5cGU6ICdiaW5hcnknIH0pXHJcbiAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFt0b0J1ZmZlcih3Ym91dCldLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0pXHJcbiAgLy8g5L+d5a2Y5a+85Ye6XHJcbiAgZG93bmxvYWRGaWxlKGJsb2IsIG9wdGlvbnMpXHJcbiAgaWYgKG1lc3NhZ2UgIT09IGZhbHNlKSB7XHJcbiAgICAkdGFibGUuJFhNb2RhbC5tZXNzYWdlKHsgbWVzc2FnZTogaTE4bigndnhlLnRhYmxlLmV4cFN1Y2Nlc3MnKSwgc3RhdHVzOiAnc3VjY2VzcycgfSlcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvd25sb2FkRmlsZSAoYmxvYjogQmxvYiwgb3B0aW9uczogYW55KSB7XHJcbiAgaWYgKHdpbmRvdy5CbG9iKSB7XHJcbiAgICBjb25zdCB7IGZpbGVuYW1lLCB0eXBlIH0gPSBvcHRpb25zXHJcbiAgICBpZiAobmF2aWdhdG9yLm1zU2F2ZUJsb2IpIHtcclxuICAgICAgbmF2aWdhdG9yLm1zU2F2ZUJsb2IoYmxvYiwgYCR7ZmlsZW5hbWV9LiR7dHlwZX1gKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGxpbmtFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXHJcbiAgICAgIGxpbmtFbGVtLnRhcmdldCA9ICdfYmxhbmsnXHJcbiAgICAgIGxpbmtFbGVtLmRvd25sb2FkID0gYCR7ZmlsZW5hbWV9LiR7dHlwZX1gXHJcbiAgICAgIGxpbmtFbGVtLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpXHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGlua0VsZW0pXHJcbiAgICAgIGxpbmtFbGVtLmNsaWNrKClcclxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rRWxlbSlcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5lcnJvcihpMThuKCd2eGUuZXJyb3Iubm90RXhwJykpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZXBsYWNlRG91YmxlUXVvdGF0aW9uICh2YWw6IHN0cmluZykge1xyXG4gIHJldHVybiB2YWwucmVwbGFjZSgvXlwiLywgJycpLnJlcGxhY2UoL1wiJC8sICcnKVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUNzdiAoY29sdW1uczogYW55W10sIGNvbnRlbnQ6IHN0cmluZykge1xyXG4gIGNvbnN0IGxpc3Q6IHN0cmluZ1tdID0gY29udGVudC5zcGxpdCgnXFxuJylcclxuICBjb25zdCBmaWVsZHM6IGFueVtdID0gW11cclxuICBjb25zdCByb3dzOiBhbnlbXSA9IFtdXHJcbiAgaWYgKGxpc3QubGVuZ3RoKSB7XHJcbiAgICBjb25zdCByTGlzdDogc3RyaW5nW10gPSBsaXN0LnNsaWNlKDEpXHJcbiAgICBsaXN0WzBdLnNwbGl0KCcsJykubWFwKHJlcGxhY2VEb3VibGVRdW90YXRpb24pXHJcbiAgICByTGlzdC5mb3JFYWNoKChyOiBzdHJpbmcpID0+IHtcclxuICAgICAgaWYgKHIpIHtcclxuICAgICAgICBjb25zdCBpdGVtOiBhbnkgPSB7fVxyXG4gICAgICAgIHIuc3BsaXQoJywnKS5mb3JFYWNoKCh2YWw6IHN0cmluZywgY29sSW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgaWYgKGZpZWxkc1tjb2xJbmRleF0pIHtcclxuICAgICAgICAgICAgaXRlbVtmaWVsZHNbY29sSW5kZXhdXSA9IHJlcGxhY2VEb3VibGVRdW90YXRpb24odmFsKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcm93cy5wdXNoKGl0ZW0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIHJldHVybiB7IGZpZWxkcywgcm93cyB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrSW1wb3J0RGF0YSAoY29sdW1uczogYW55W10sIGZpZWxkczogc3RyaW5nW10sIHJvd3M6IGFueVtdKSB7XHJcbiAgbGV0IHRhYmxlRmllbGRzOiBzdHJpbmdbXSA9IFtdXHJcbiAgY29sdW1ucy5mb3JFYWNoKChjb2x1bW46IGFueSkgPT4ge1xyXG4gICAgbGV0IGZpZWxkOiBzdHJpbmcgPSBjb2x1bW4ucHJvcGVydHlcclxuICAgIGlmIChmaWVsZCkge1xyXG4gICAgICB0YWJsZUZpZWxkcy5wdXNoKGZpZWxkKVxyXG4gICAgfVxyXG4gIH0pXHJcbiAgcmV0dXJuIHRhYmxlRmllbGRzLmV2ZXJ5KChmaWVsZDogc3RyaW5nKSA9PiBmaWVsZHMuaW5jbHVkZXMoZmllbGQpKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbXBvcnRYTFNYIChwYXJhbXM6IGFueSkge1xyXG4gIGNvbnN0IHsgJHRhYmxlLCBjb2x1bW5zLCBvcHRpb25zLCBmaWxlIH0gPSBwYXJhbXNcclxuICBjb25zdCB7IF9pbXBvcnRDYWxsYmFjaywgX2ltcG9ydFJlc29sdmUgfSA9ICR0YWJsZVxyXG4gIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXHJcbiAgZmlsZVJlYWRlci5vbmxvYWQgPSAoZTogYW55KSA9PiB7XHJcbiAgICBjb25zdCB3b3JrYm9vayA9IFhMU1gucmVhZChlLnRhcmdldC5yZXN1bHQsIHsgdHlwZTogJ2JpbmFyeScgfSlcclxuICAgIGNvbnN0IGNzdkRhdGE6IHN0cmluZyA9IFhMU1gudXRpbHMuc2hlZXRfdG9fY3N2KHdvcmtib29rLlNoZWV0cy5TaGVldDEpXHJcbiAgICBjb25zdCByZXN0OiBhbnkgPSBwYXJzZUNzdihjb2x1bW5zLCBjc3ZEYXRhKVxyXG4gICAgY29uc3QgeyBmaWVsZHMsIHJvd3MgfSA9IHJlc3RcclxuICAgIGNvbnN0IHN0YXR1cyA9IGNoZWNrSW1wb3J0RGF0YShjb2x1bW5zLCBmaWVsZHMsIHJvd3MpXHJcbiAgICBpZiAoc3RhdHVzKSB7XHJcbiAgICAgICR0YWJsZS5jcmVhdGVEYXRhKHJvd3MpXHJcbiAgICAgICAgLnRoZW4oKGRhdGE6IGFueVtdKSA9PiB7XHJcbiAgICAgICAgICBpZiAob3B0aW9ucy5tb2RlID09PSAnYXBwZW5kJykge1xyXG4gICAgICAgICAgICAkdGFibGUuaW5zZXJ0QXQoZGF0YSwgLTEpXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkdGFibGUucmVsb2FkRGF0YShkYXRhKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIGlmIChvcHRpb25zLm1lc3NhZ2UgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgJHRhYmxlLiRYTW9kYWwubWVzc2FnZSh7IG1lc3NhZ2U6IFhFVXRpbHMudGVtcGxhdGUoaTE4bigndnhlLnRhYmxlLmltcFN1Y2Nlc3MnKSwgW3Jvd3MubGVuZ3RoXSksIHN0YXR1czogJ3N1Y2Nlc3MnIH0pXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5tZXNzYWdlICE9PSBmYWxzZSkge1xyXG4gICAgICAkdGFibGUuJFhNb2RhbC5tZXNzYWdlKHsgbWVzc2FnZTogaTE4bigndnhlLmVycm9yLmltcEZpZWxkcycpLCBzdGF0dXM6ICdlcnJvcicgfSlcclxuICAgIH1cclxuICAgIGlmIChfaW1wb3J0UmVzb2x2ZSkge1xyXG4gICAgICBfaW1wb3J0UmVzb2x2ZShzdGF0dXMpXHJcbiAgICAgICR0YWJsZS5faW1wb3J0UmVzb2x2ZSA9IG51bGxcclxuICAgIH0gZWxzZSBpZiAoX2ltcG9ydENhbGxiYWNrKSB7XHJcbiAgICAgIC8vIOW3suW6n+W8g1xyXG4gICAgICBfaW1wb3J0Q2FsbGJhY2soc3RhdHVzKVxyXG4gICAgICAkdGFibGUuX2ltcG9ydENhbGxiYWNrID0gbnVsbFxyXG4gICAgfVxyXG4gIH1cclxuICBmaWxlUmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhmaWxlKVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVJbXBvcnRFdmVudCAocGFyYW1zOiBhbnkpIHtcclxuICBpZiAocGFyYW1zLm9wdGlvbnMudHlwZSA9PT0gJ3hsc3gnKSB7XHJcbiAgICBpbXBvcnRYTFNYKHBhcmFtcylcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlRXhwb3J0RXZlbnQgKHBhcmFtczogYW55KSB7XHJcbiAgaWYgKHBhcmFtcy5vcHRpb25zLnR5cGUgPT09ICd4bHN4Jykge1xyXG4gICAgZXhwb3J0WExTWChwYXJhbXMpXHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDln7rkuo4gdnhlLXRhYmxlIOihqOagvOeahOWinuW8uuaPkuS7tu+8jOaUr+aMgeWvvOWHuiB4bHN4IOagvOW8j1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFZYRVRhYmxlUGx1Z2luRXhwb3J0WExTWDogYW55ID0ge1xyXG4gIGluc3RhbGwgKHh0YWJsZTogdHlwZW9mIFZYRVRhYmxlKSB7XHJcbiAgICBPYmplY3QuYXNzaWduKHh0YWJsZS50eXBlcywgeyB4bHN4OiAxIH0pXHJcbiAgICB4dGFibGUuaW50ZXJjZXB0b3IubWl4aW4oe1xyXG4gICAgICAnZXZlbnQuaW1wb3J0JzogaGFuZGxlSW1wb3J0RXZlbnQsXHJcbiAgICAgICdldmVudC5leHBvcnQnOiBoYW5kbGVFeHBvcnRFdmVudFxyXG4gICAgfSlcclxuICAgIFZYRVRhYmxlUGx1Z2luRXhwb3J0WExTWC50ID0geHRhYmxlLnRcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGkxOG4gKGtleTogc3RyaW5nKSB7XHJcbiAgaWYgKFZYRVRhYmxlUGx1Z2luRXhwb3J0WExTWC50KSB7XHJcbiAgICByZXR1cm4gVlhFVGFibGVQbHVnaW5FeHBvcnRYTFNYLnQoa2V5KVxyXG4gIH1cclxufVxyXG5cclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WWEVUYWJsZSkge1xyXG4gIHdpbmRvdy5WWEVUYWJsZS51c2UoVlhFVGFibGVQbHVnaW5FeHBvcnRYTFNYKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWWEVUYWJsZVBsdWdpbkV4cG9ydFhMU1hcclxuIl19
